{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Pixelvirt Technology's Documentation Hub","text":"<p>At Pixelvirt Technology, we're more than just a software company - we're your partners in innovation. With a passion for creating cutting-edge solutions and a commitment to unparalleled support, we've been at the forefront of the software industry for [number] years.</p> <p>Our mission is simple: to empower businesses like yours with the tools they need to thrive in today's digital landscape. Whether you're a small startup or a global enterprise, our comprehensive suite of software products is designed to streamline your operations, boost productivity, and drive growth.</p> <p>What sets us apart? It's our dedication to excellence in every aspect of what we do. From the initial development stages to ongoing customer support, we prioritize quality, reliability, and user satisfaction above all else.</p> <p>Our new documentation site is a testament to this commitment. Here, you'll find a wealth of resources to help you make the most of our software offerings. From step-by-step guides and tutorials to troubleshooting tips and best practices, we've got you covered at every stage of your journey.</p> <p>So whether you're a seasoned user looking to maximize your efficiency or a newcomer eager to explore the possibilities, you've come to the right place. Welcome to the Pixelvirt Technology Documentation Hub - your gateway to success in the digital age.</p> <p>Ready to get started? Dive in and discover what sets Pixelvirt Technology apart today.</p>"},{"location":"openstack/image-creation/","title":"Image creation","text":"<ol> <li> <p>Login to Horizon Dashboard:</p> <ul> <li>Open a web browser and navigate to the Horizon dashboard URL.</li> <li>Enter your username and password to log in.</li> <li> <p>Navigate to the Images Panel:</p> </li> <li> <p>Once logged in, on the left-hand side menu, click on \"Compute\"  to expand the menu.</p> </li> <li>Click on \"Images\" to navigate to the Images panel.</li> <li> <p>Create a New Image:</p> </li> <li> <p>In the Images panel, click on the \"Create Image\" button (usually located at the top right corner or bottom of the page).</p> </li> <li>Fill in Image Details:</li> <li>Provide a name for the new image in the \"Name\" field.</li> <li>Optionally, you can add a description to the image in the \"Description\" field.</li> <li>Select the source from which you want to create the image:<ul> <li>Image File: If you have an image file that you want to upload.</li> <li>Instance Snapshot: If you want to create an image from an existing instance snapshot.</li> <li>Volume Snapshot: If you want to create an image from an existing volume snapshot.</li> </ul> </li> <li>Depending on the source selected, provide additional details like file location or instance/volume snapshot.</li> <li> <p>Configure Image Properties:</p> </li> <li> <p>Set the format of the image (usually QCOW2 or RAW).</p> </li> <li>Specify the minimum disk and minimum RAM required for instances created from this image.</li> <li>You may also set other properties like architecture, OS type, etc., if needed.</li> <li> <p>Add Tags (Optional):</p> </li> <li> <p>You can optionally add tags to the image for easier categorization and organization.</p> </li> <li> <p>Review and Create:</p> </li> <li> <p>Review all the details provided for the new image.</p> </li> <li>Click on the \"Create Image\" or \"Create\" button to create the image.</li> </ul> </li> <li> <p>Verify Image Creation:</p> <ul> <li>Once the image creation process is complete, you should see the new image listed in the Images panel of the Horizon dashboard.</li> <li>You can also verify the image creation by launching instances from the newly created image.</li> </ul> </li> </ol>"},{"location":"openstack/instance-access/","title":"Instance access","text":"<p>Accessing an OpenStack instance using a key pair typically involves SSH (Secure Shell) access. Below is a basic guide on how to access an OpenStack instance using a key pair:</p> <ol> <li> <p>Prerequisites:</p> <ul> <li>You should have already created an OpenStack instance and associated it with the key pair during the instance creation process.</li> <li>You should have the private key corresponding to the key pair you associated with the instance. If you generated the key pair through OpenStack, you should have downloaded the private key file during the key pair creation process.</li> <li> <p>Locate the Private Key File:</p> </li> <li> <p>If you haven't already done so, locate the private key file on your local machine. This is the file you downloaded when you created the key pair.</p> </li> <li> <p>Set Appropriate Permissions:</p> </li> <li> <p>Ensure that the permissions on the private key file are set to be restrictive. In Unix-like systems, you can use the following command:</p> <p>bashCopy code</p> <p><code>chmod 600 /path/to/private_key.pem</code></p> </li> </ul> </li> <li> <p>Find the Public IP Address of the Instance:</p> <ul> <li>In the OpenStack dashboard, navigate to the Instances panel or use the OpenStack CLI to find the public IP address of the instance you want to access.</li> <li> <p>SSH into the Instance:</p> </li> <li> <p>Open a terminal or command prompt on your local machine.</p> </li> <li> <p>Use the <code>ssh</code> command to connect to the instance, specifying the username and the path to the private key file:</p> <p>cssCopy code</p> <p><code>ssh -i /path/to/private_key.pem username@instance_public_ip</code></p> </li> </ul> <p>Replace <code>/path/to/private_key.pem</code> with the path to your private key file, <code>username</code> with the appropriate username for the image you are using (common ones include 'ubuntu' or 'centos'), and <code>instance_public_ip</code> with the public IP address of your OpenStack instance.</p> </li> <li> <p>Authenticate:</p> <ul> <li>When prompted, authenticate by typing 'yes' if you trust the host, then enter the passphrase associated with the private key (if you set one during key pair creation).</li> <li> <p>Access the Instance:</p> </li> <li> <p>Once authenticated, you should now have access to the command line interface of the OpenStack instance via SSH.</p> </li> </ul> </li> </ol> <p>Remember to properly manage your private key, as it provides access to your instance. Keep it secure and don't share it with unauthorized parties. Additionally, if you're having trouble accessing the instance, ensure that the security group associated with the instance allows SSH traffic on port 22.</p>"},{"location":"openstack/key-pair/","title":"Key pair","text":"<p>Creating a New Key Pair:</p> <ol> <li>Access Horizon:\u00a0Log in to your OpenStack Horizon dashboard with appropriate credentials.</li> <li>Navigate to \"Project\" -&gt; \"Compute\"  -&gt; \"Key Pairs\".</li> <li>Click \"Create Key Pair\".</li> <li>Enter a descriptive name for your key pair (e.g., \"my-key-pair\").</li> <li>(Optional) Choose a key type.\u00a0By default, it's usually SSH Key.</li> <li>Click \"Create Key Pair\".\u00a0Horizon will generate a new key pair consisting of a private key (<code>.pem</code>\u00a0file) and a public key.</li> </ol> <p>Downloading the Private Key:</p> <ul> <li>A dialog box will appear with the private key content.</li> <li>Important:\u00a0It's crucial to download and save the private key securely.\u00a0Do not share your private key with anyone.\u00a0You'll use this private key to connect to your instances later.</li> <li>Click \"Download Key Pair\" to save the private key as a\u00a0<code>.pem</code>\u00a0file to your local machine.</li> </ul> <p>Importing an Existing Key Pair:</p> <ol> <li>Navigate to \"Project\" -&gt; \"Compute\" -&gt; \"Access &amp; Security\" -&gt; \"Key Pairs\".</li> <li>Click \"Import Key Pair\".</li> <li>Enter a name for your key pair (e.g., \"imported-key\").</li> <li>Paste the public key content into the \"Public Key\" text box.\u00a0You can obtain the public key from the existing key pair file (usually named\u00a0<code>&lt;key-name&gt;.pub</code>).</li> <li>Click \"Import Key Pair\".\u00a0Horizon will import the public key associated with your existing key pair.</li> </ol> <p>Additional Notes:</p> <ul> <li>Security Groups:\u00a0Remember to configure security groups for your instances to control inbound traffic and ensure security. Even with a key pair, you'll need appropriate security group rules to allow SSH access on port 22 for your instances.</li> <li>Key Pair Management:\u00a0You can view details, download private keys again (if needed), or delete key pairs from the \"Key Pairs\" list within Horizon.</li> </ul>"},{"location":"openstack/lunch-instance/","title":"Lunch instance","text":"<ol> <li> <p>Log in to Horizon:</p> <ul> <li>Navigate to your OpenStack Horizon login page and enter your username and password.</li> <li> <p>Access the Compute Section:</p> </li> <li> <p>Once logged in, locate the \"Project\" tab on the Horizon dashboard.</p> </li> <li>Under the \"Project\" tab, click on \"Compute\" and then select \"Instances\".</li> <li> <p>Launch Instance:</p> </li> <li> <p>On the \"Instances\" page, click the \"Launch Instance\" button located in the top right corner.</p> </li> <li> <p>Configure Instance Details:</p> </li> <li> <p>Details Tab:</p> <ul> <li>Instance Name:\u00a0Enter a descriptive name for your virtual machine instance.</li> <li>Description:\u00a0(Optional) Provide a brief description of the instance's purpose.</li> <li>Availability Zone:\u00a0(Optional) Choose a specific availability zone if desired (default is usually fine for beginners).</li> <li> <p>Count:\u00a0Specify the number of identical instances you want to launch (default is 1).</p> <ul> <li>Sources Tab:</li> </ul> </li> <li> <p>Boot Source:\u00a0Select \"Image\" as the boot source.</p> </li> <li>Image:\u00a0Choose the desired operating system image for your instance from the available options.</li> <li>Create New Volume:\u00a0Select \"Yes\" or \"No\" depending on if you want to create a new volume for the instance's storage.</li> <li>Flavor Selection:</li> </ul> </li> <li> <p>In the \"Flavor\" tab, choose the appropriate instance size (flavor) that aligns with your resource requirements. Flavor options typically define CPU cores, RAM, and storage capacity.</p> </li> <li> <p>Network Selection:</p> </li> <li> <p>In the \"Networks\" tab, select the network(s) to which your instance should connect. This allows communication with other resources on the OpenStack cloud.</p> </li> <li> <p>Security Groups:</p> </li> <li> <p>In the \"Security Groups\" tab, select or create a security group that defines the network traffic allowed to and from your instance. It's recommended to create a custom security group with specific rules for secure access.</p> </li> <li> <p>Key Pair Selection:</p> </li> <li> <p>In the \"Key Pair\" tab, choose an existing SSH key pair for secure login to your instance. You can also generate a new key pair within Horizon if needed.</p> </li> <li> <p>Review and Launch:</p> </li> <li> <p>Carefully review all the configuration options you've chosen for your instance.</p> </li> <li>Once satisfied, click the \"Launch Instance\" button to initiate the creation process.</li> <li>Monitoring and Access:</li> </ul> </li> <li> <p>After launching, your instance will appear in the \"Instances\" list with its status transitioning through \"BUILDING\" to \"ACTIVE\" when ready.</p> </li> <li>Use the Horizon dashboard to view details, monitor performance, and access your instance (using SSH with the selected key pair).</li> </ol>"},{"location":"openstack/network-creation/","title":"Network creation","text":"<p>1. Creating a  Internal Network</p> <ol> <li>Navigate to \"Project\" -&gt; \"Network\" -&gt; \"Networks\".</li> <li>Click \"Create Network\" twice to create two separate internal networks.</li> <li>For each network:<ul> <li>Enter a descriptive name (e.g., \"internal-net1\", \"internal-net2\").</li> <li>Set \"Admin State\" to \"Up\".</li> <li>Choose \"No\" for \"Shared\" (unless project-wide sharing is required).</li> <li>Check the \"Create subnet\" checkbox.</li> <li>Configure subnet details for each network:<ul> <li>Enter a name for the subnet (e.g., \"internal-subnet1\", \"internal-subnet2\").</li> <li>Specify the IP address block using CIDR notation (e.g., 10.0.1.0/24 for the first network, 10.0.2.0/24 for the second).</li> <li>(Optional) Define allocation pools if needed.</li> </ul> </li> <li>Click \"Create Network\" to create each network with its subnet.</li> </ul> </li> </ol> <p>2. Create a Router:</p> <ol> <li>Navigate to \"Project\" -&gt; \"Network\" -&gt; \"Routers\".</li> <li>Click \"Create Router\".</li> <li>Enter a name for the router (e.g., \"my-router\").</li> <li>Set \"Admin State\" to \"Up\".</li> <li>Select the existing external network from the \"External Network\" dropdown menu (assuming you have one).</li> <li>Click \"Create Router\" to create the router.</li> </ol> <p>3. Add Internal Networks to the Router:</p> <ol> <li>Navigate back to the \"Routers\" list.</li> <li>Click on the name of the router you just created (e.g., \"my-router\").</li> <li>In the router details view, locate the \"Interfaces\" section.</li> <li>Click the \"Add Interface\" button twice (once for each internal network).</li> <li>For each interface:<ul> <li>Choose \"Subnet\" as the interface type.</li> <li>Select the corresponding internal network from the \"Network\" dropdown (e.g., \"internal-net1\" for the first interface, \"internal-net2\" for the second).</li> <li>Click \"Add Interface\" to connect each internal network to the router.</li> </ul> </li> </ol> <p>4. Obtain and Associate Floating IPs: - Provides a public IP address for your instance, allowing external resources to access it on the internet. - Offers a more flexible and manageable way to expose instances publicly compared to assigning a static public IP directly to the instance.</p> <ol> <li>Obtain Floating IPs:\u00a0You'll need to acquire floating IP addresses from your OpenStack environment. This might involve requesting them from the administrator or using a self-service mechanism if available.</li> <li>Associate Floating IPs with Instances:<ul> <li>Navigate to the instance details within OpenStack Horizon.</li> <li>Look for an option to \"Associate Floating IP\" or similar wording.</li> <li>Select the obtained floating IP(s) from the available options and associate them with your instances within the internal networks.</li> </ul> </li> </ol> <p>5. (Optional) Verify Connectivity:</p> <ul> <li>Once everything is configured, launch instances within the internal networks.</li> <li>You can use tools like\u00a0<code>ping</code>\u00a0or web browsing within the instances to verify connectivity:<ul> <li>Internal network communication should work seamlessly</li> </ul> </li> </ul>"},{"location":"openstack/org-registration/","title":"Org registration","text":"<ol> <li> <p>Access Registration Page:</p> <ul> <li>Registration on gcloud is exclusive to organization admins. Normal users will be created by organization admins. To begin the registration process, visit the registration page by clicking here.</li> <li> <p>Organization Registration:</p> </li> <li> <p>If your organization is not yet registered, you need to start by registering your organization. Fill in the necessary details as prompted.</p> </li> <li> <p>Select Organization (If Already Registered):</p> </li> <li> <p>If your organization is already registered, you can simply select it from the list provided.</p> </li> <li> <p>Proceed to User Details:</p> </li> <li> <p>After selecting your organization, click \"Next\" to proceed to the user details section.</p> </li> <li> <p>Fill Project Admin User Details:</p> </li> <li> <p>In this section, provide the necessary details for the project admin user.</p> </li> <li> <p>Submit Registration Request:</p> </li> <li> <p>After filling in the user details, submit the registration request. Your user and organization registration request will be sent to the project admin for review.</p> </li> <li> <p>Wait for Approval:</p> </li> <li> <p>Once submitted, please wait for a while for the project admin to review and approve your registration request.</p> </li> <li> <p>Notification of Approval:</p> </li> <li> <p>You will be notified via text message to the mobile number provided during registration once your account is approved.</p> </li> </ul> </li> </ol>"},{"location":"openstack/org-registration/#logging-in-as-project-admin","title":"Logging In as Project Admin:","text":"<ol> <li> <p>Approval Notification:</p> <ul> <li>Upon approval, you will receive a notification confirming the approval of your account.</li> <li> <p>Log In:</p> </li> <li> <p>With your account approved, you can now log in to the gcloud platform as a project admin using your registered credentials.</p> </li> <li> <p>Access Cloud Services:</p> </li> <li> <p>After logging in, you will have access to various cloud services provided by gcloud as a project admin.</p> </li> </ul> </li> </ol>"},{"location":"openstack/quick-guide/","title":"Quick guide","text":"<p>This documentation is only for the first login of a project admin.After the initial configuration, you can use these steps as a reference for creating additional private networks, routers, and enabling internet access for your VMs within the OpenStack environment.</p> <p>Prerequisites:</p> <ul> <li>Access to OpenStack Horizon dashboard with project admin credentials.</li> </ul> <p>Steps:</p> <p>1. Create a Private Network:</p> <ol> <li>Navigate to \"Project\" -&gt; \"Network\" -&gt; \"Networks\".</li> <li>Click \"Create Network\" to initiate the creation of a new internal network for your VMs.</li> <li>Enter a descriptive name for your network (e.g., \"internal-net1\").</li> <li>Set \"Admin State\" to \"Up\" to ensure the network is active.</li> <li>Choose \"No\" for \"Shared\" unless you intend to share this network with other projects within your OpenStack environment.</li> <li>(Optional) Customize network quotas (e.g., number of subnets, IP addresses) if your cloud provider allows it.<ul> <li>Network quotas might not be directly configurable within Horizon; consult your cloud provider's documentation for details.</li> </ul> </li> <li>Click \"Create Network\" to create the internal network.</li> </ol> <p>2. Create a Subnet for the Private Network:</p> <ol> <li>Within the \"Networks\" list,\u00a0locate the newly created network (e.g., \"internal-net1\"). Click its name to access details.</li> <li>In the network details view, click the \"Create Subnet\" button.</li> <li>Enter a name for the subnet (e.g., \"internal-subnet1\").</li> <li>Specify the IP address block for the subnet using CIDR notation (e.g., 10.0.1.0/24). Choose a block that fits your project's IP address needs and avoids conflicts with existing networks.</li> <li>Leave the \"Gateway IP\" field blank for now. We'll configure this later when enabling internet access.</li> <li>(Optional) Define allocation pools if you need to reserve specific IP addresses within the subnet for designated purposes.</li> <li>Click \"Create Subnet\" to create the subnet within your internal network.</li> </ol> <p>3. Create a Router:</p> <ol> <li>Navigate back to \"Project\" -&gt; \"Network\" -&gt; \"Routers\".</li> <li>Click \"Create Router\" to initiate the creation of a new router.</li> <li>Enter a descriptive name for your router (e.g., \"my-router\").</li> <li>Set \"Admin State\" to \"Up\" to activate the router.</li> <li>In the \"External Network\" dropdown menu,\u00a0select the existing external network that provides internet access\u00a0within your OpenStack environment (assuming you have one). This network typically connects to an external gateway and the internet.</li> <li>Click \"Create Router\" to create the router.</li> </ol> <p>4. Add Interface to Router (Connecting Private Network):</p> <ol> <li>Navigate back to the \"Routers\" list.</li> <li>Click the name of the router you just created (e.g., \"my-router\").</li> <li>Locate the \"Interfaces\" section within the router details view.</li> <li>Click the \"Add Interface\" button.</li> <li>In the \"Interface Type\" dropdown menu, choose \"Subnet\".</li> <li>In the \"Network\" dropdown menu, select the internal network you created earlier (e.g., \"internal-net1\").</li> <li>Click \"Add Interface\" to connect the internal network to the router. Essentially, the router will now act as a gateway for VMs within the internal network to reach the internet.</li> </ol> <p>Verification</p> <ul> <li>Once you've completed these steps, launch VMs and assign them to the created subnet.</li> <li> <p>You can use tools like\u00a0<code>ping</code>\u00a0or web browsing within the VMs to verify connectivity: Additional Notes:</p> </li> <li> <p>Each private network can be attached to only one router, maintaining clear network segmentation and management.</p> </li> </ul>"},{"location":"openstack/quota-org-request/","title":"Quota org request","text":"<p>OpenStack Quotas</p> <p>In OpenStack, quotas are mechanisms that define resource limits for projects or users within a cloud environment. These limits help cloud administrators control resource consumption and ensure fair allocation among different tenants. Project admins can create or modify quotas to adjust resource availability based on project needs.</p> <p>Quota Request: The quota request feature enables users to request an increase in their default resource quotas by submitting a formal request to the administrator. This documentation outlines the steps to initiate and submit a quota request.</p>"},{"location":"openstack/quota-org-request/#initiating-a-quota-request","title":"Initiating a Quota Request:","text":"<ol> <li> <p>Accessing Resource Request:</p> <ul> <li>Navigate to the designated resource management section within your account interface.</li> <li>Locate and select \"Resource Request.\"</li> <li> <p>Accessing Quota Request:</p> </li> <li> <p>Within the Resource Request section, find and click on \"Quota Request.\"</p> </li> <li> <p>Initiating Quota Request:</p> </li> <li> <p>Click on \"Request Quota\" to commence the quota request process.</p> </li> </ul> </li> </ol>"},{"location":"openstack/quota-org-request/#submitting-a-quota-request","title":"Submitting a Quota Request:","text":"<ol> <li>Specifying Resource Requirements:<ul> <li>In the provided form, specify the additional resources you require.</li> <li>For instance, if you need 3 more instances and 5 additional vCPUs, input '3' for instances and '5' for vCPUs.</li> </ul> </li> <li>Navigating Through the Request Form:<ul> <li>Proceed by clicking \"Next\" to advance through the request form.</li> </ul> </li> <li>Adjusting Values:<ul> <li>Adjust any other relevant values or parameters as needed in the request form.</li> </ul> </li> <li>Saving the Request:<ul> <li>Once satisfied with the provided details, save the request by clicking on the appropriate button.</li> </ul> </li> </ol>"},{"location":"openstack/quota-org-request/#confirmation-and-waiting-for-approval","title":"Confirmation and Waiting for Approval:","text":"<ol> <li>Submission Confirmation:<ul> <li>Upon saving, your quota request is formally submitted for review.</li> </ul> </li> <li>Awaiting Approval:<ul> <li>Please wait for the administrator's review and approval of your quota request.</li> </ul> </li> <li>Notification of Approval:<ul> <li>Upon approval, you will receive a notification via text message confirming the status of your quota request.</li> </ul> </li> </ol> <p>Types of OpenStack Quotas:</p> <p>OpenStack quotas encompass a variety of resources, often categorized as follows (specific names and availability might vary slightly depending on the OpenStack version):</p> <ul> <li>Compute:</li> <li> <p>Instances: This refers to the maximum number of virtual machines (VMs) that a user can create within their project or tenant. Instances are essentially the virtual servers that run applications and perform computing tasks.</p> </li> <li> <p>VCPUs: VCPUs stands for Virtual Central Processing Units. It denotes the total number of virtual CPU cores that a user can allocate across their instances. Each instance typically utilizes one or more VCPUs depending on its computational requirements.</p> </li> <li> <p>RAM (MB): RAM, or Random Access Memory, represents the total amount of memory available for use by the instances. It is measured in megabytes (MB) and determines the amount of data that can be processed simultaneously.</p> </li> <li> <p>Metadata Items: Metadata items are key-value pairs that provide additional information about an instance, such as configuration details or user-defined tags. Users can associate metadata with instances to customize their behavior or provide contextual information.</p> </li> <li> <p>Key Pairs: Key pairs are used for SSH authentication when accessing instances securely. They consist of a public key that is stored on the instance and a private key that remains with the user. Key pairs ensure secure communication between the user's system and the virtual machines.</p> </li> <li> <p>Server Groups: Server groups allow users to logically group instances for various purposes, such as high availability or load balancing. They help in organizing and managing instances efficiently, particularly in complex environments with multiple instances.</p> </li> <li> <p>Server Group Members: This refers to the maximum number of instances that can be members of a single server group. It determines the scalability and flexibility of server groups in distributing workloads and ensuring redundancy.</p> </li> <li> <p>Injected Files: Injected files are files that can be injected into an instance during its creation or runtime. These files are often used for configuration purposes, allowing users to customize the behavior of their instances by providing additional scripts or settings.</p> </li> <li> <p>Injected File Content (B): It specifies the maximum size of each injected file in bytes. This limit ensures that injected files do not exceed a certain size, preventing potential performance issues or resource constraints.</p> </li> <li> <p>Length of Injected File: This represents the maximum length of the content of an injected file in characters. It determines the size limit for individual files injected into instances, ensuring efficient management of configuration files and scripts.</p> </li> <li> <p>Block Storage:</p> <ul> <li>Volumes (number of block storage volumes)</li> <li>Volume Snapshots  (number of snapshots)</li> <li>Totalk size of volume and snapshots(GB) (total storage capacity)</li> </ul> </li> <li>Object Storage:<ul> <li>Containers (number of object storage containers)</li> <li>Objects (number of objects)</li> <li>Gigabytes (total storage capacity)</li> </ul> </li> </ul>"},{"location":"openstack/quota-org-request/#conclusion","title":"Conclusion:","text":"<p>The quota request process allows users to efficiently communicate their additional resource needs to administrators. By following the outlined steps, users can seamlessly submit their requests, facilitating a smoother resource allocation process within the system.</p>"},{"location":"pixelview/api/","title":"Pixelview API","text":"<p>Pixelview API can be used to interact with the Pixelview backend. You can use the API to various things like create alert, and interact with existing alerts among other things.</p> <p>What you need before you can use the API.</p> Header Description <code>X-Username</code> This is your email address that you use for login <code>X-Auth-Key</code> This is the service key for the which you want to create alerts. This is only required to create alerts. <code>X-API-Key</code> Your API Key (get from your profile page)"},{"location":"pixelview/api/#alerts-apialerts","title":"Alerts (/api/alerts)","text":"Get all open alerts<pre><code>curl \"https://pixelview.pixelvirt.com/api/alerts\" -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\"\n</code></pre> Get all open alerts for a given service<pre><code>curl \"https://pixelview.pixelvirt.com/api/alerts?service_uuid=a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\"\n</code></pre> Get details of a given alert with incident_key<pre><code>curl \"https://pixelview.pixelvirt.com/api/alerts/52183169-9472-4afe-97e7-e6fa670c86f1\" -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\"\n</code></pre> Update the status of an alert<pre><code>curl \"https://pixelview.pixelvirt.com/api/alerts/52183169-9472-4afe-97e7-e6fa670c86f1\" -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\" -X PUT -d '{\"status\": \"acknowledged\"}'\n</code></pre> Type Incident Activity or Alert Activity<pre><code>// IncidentActivity represents the structure for posting incident activity\ntype IncidentActivity struct {\n        IncidentKey      string                 `json:\"incident_key\" bson:\"incident_key\"`\n        ActivityType     string                 `json:\"activity_type\" bson:\"activity_type\"`\n        Description      string                 `json:\"description\" bson:\"description\"`\n        Details          string                 `json:\"details\" bson:\"details\"`\n        ServiceName      string                 `json:\"servicename\" bson:\"servicename\"`\n        Hostname         string                 `json:\"hostname\" bson:\"hostname\"`\n        AutomationResult StackstormNotification `json:\"automation_result\" bson:\"automation_result\"`\n        RawData          interface{}            `json:\"raw_data\" bson:\"raw_data\"`\n}\n</code></pre> Add Activity to alert Timeline<pre><code>curl \"https://pixelview.pixelvirt.com/api/alerts/52183169-9472-4afe-97e7-e6fa670c86f1/activities\" -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\" -X POST -d '{\"activity_type\": \"Acknowledged\", \"incident_key\": \"52183169-9472-4afe-97e7-e6fa670c86f1\"}'\n</code></pre>"},{"location":"pixelview/api/#comments","title":"Comments","text":"Type Comment<pre><code>type Comment struct {\n        Body         string    `json:\"body\" bson:\"body\"`\n        TaskUUID     string    `json:\"task_uuid\" bson:\"task_uuid\"`\n        CaseUUID     string    `json:\"case_uuid\" bson:\"case_uuid\"`\n        IncidentKey  string    `json:\"incident_key\" bson:\"incident_key\"`\n}\n</code></pre> <p>Note</p> <p>One of <code>incident_key</code> or <code>case_uuid</code> is required. If you pass both, incident_key is used.</p> Create/Add New Comment<pre><code>curl \"https://pixelview.pixelvirt.com/api/comment_create\"  -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\" -X POST -d '{\"incident_key\": \"I have Acknowledged this alert.\", \"incident_key\": \"52183169-9472-4afe-97e7-e6fa670c86f1\"}'\n</code></pre> Delete a Comment<pre><code>curl \"https://pixelview.pixelvirt.com/api/comment_delete\"  -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\" -X POST -d '{\"incident_key\": \"52183169-9472-4afe-97e7-e6fa670c86f1\"}'\n</code></pre>"},{"location":"pixelview/api/#inventory","title":"Inventory","text":"Type Inventory Cloud<pre><code>type Cloud struct {\n        UUID        string                 `json:\"uuid\" bson:\"uuid\"`\n    Name        string                 `json:\"name\" bson:\"name\"`\n    Description string                 `json:\"description\" bson:\"description\"`\n    Labels      []Label                `json:\"labels\" bson:\"labels\"`\n    VaultData   VaultData              `json:\"vault_data\" bson:\"vault_data\"`\n    Data        map[string]interface{} `json:\"data\" bson:\"data\"`\n}\n</code></pre> Create Inventory Cloud<pre><code>curl \"https://pixelview.pixelvirt.com/api/inventory/cloud\"  -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\" -X POST -d '{\"name\" \"Cloud1\", \"description\": \"this is my cloud\", \"labels\": ['abcd'], \"data\": {'a':'b'}}'\n</code></pre> Update Inventory Cloud<pre><code>curl \"https://pixelview.pixelvirt.com/api/inventory/cloud\"  -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\" -X POST -d '{\"name\" \"Cloud1\", \"description\": \"this is my cloud\", \"labels\": ['abcd'], \"data\": {'a':'c'}}'\n</code></pre> Delete Inventory Cloud<pre><code>curl \"https://pixelview.pixelvirt.com/api/inventory/cloud\"  -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\" -X POST -d '{\"uuid\": \"f74b4df7-f3f4-4777-9562-796355555faf\"}'\n</code></pre> Type Inventory Region<pre><code>type Region struct {\n    UUID        string                 `json:\"uuid\" bson:\"uuid\"`\n    Name        string                 `json:\"name\" bson:\"name\"`\n    Description string                 `json:\"description\" bson:\"description\"`\n    Labels      []Label                `json:\"labels\" bson:\"labels\"`\n    CloudUUID   string                 `json:\"cloud_uuid\" bson:\"cloud_uuid\"`\n    Data        map[string]interface{} `json:\"data\" bson:\"data\"`\n}\n</code></pre> Create Inventory Region<pre><code>curl \"https://pixelview.pixelvirt.com/api/inventory/cloud\"  -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\" -X POST -d '{\"name\" \"Region1\", \"description\": \"this is region1 in cloud 1\", \"cloud_uuid\": \"f74b4df7-f3f4-4777-9562-796355555faf\", \"labels\": ['abcd'], \"data\": {'one':'two'}}'\n</code></pre> Update Inventory Region<pre><code>curl \"https://pixelview.pixelvirt.com/api/inventory/cloud\"  -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\" -X PUT -d '{\"name\" \"Region1\", \"description\": \"this is region1 in cloud 1\", \"cloud_uuid\": \"f74b4df7-f3f4-4777-9562-796355555faf\", \"labels\": ['abcd'], \"data\": {'one':'three'}}'\n</code></pre> Delete Inventory Region<pre><code>curl \"https://pixelview.pixelvirt.com/api/inventory/cloud\"  -H \"X-Username: user@pixelvirt.com\" -H \"X-Auth-Key: a3b0d9445r-21e4-4c89-123-89e7cd8a3bfe\" -H \"X-API-Key: 99b0d943-21e4-4c89-abcx-o9e7cd8a3bf1\" -X DELETE -d '{\"uuid\": \"ec44b4df7-a3f4-3777-cc62-796355555fca\"}'\n</code></pre> Type Inventory Zone<pre><code>type Zone struct {\n    UUID        string                 `json:\"uuid\" bson:\"uuid\"`\n    Name        string                 `json:\"name\" bson:\"name\"`\n    Description string                 `json:\"description\" bson:\"description\"`\n    Labels      []Label                `json:\"labels\" bson:\"labels\"`\n    RegionUUID  string                 `json:\"region_uuid\" bson:\"region_uuid\"`\n    CloudUUID   string                 `json:\"cloud_uuid\" bson:\"cloud_uuid\"`\n    Data        map[string]interface{} `json:\"data\" bson:\"data\"`\n}\n</code></pre> Type Inventory Server<pre><code>type Server struct {\n    UUID       string                 `json:\"uuid\" bson:\"uuid\"`\n    Name       string                 `json:\"name\" bson:\"name\"`\n    Type       string                 `json:\"type\" bson:\"type\"`\n    CloudID    int                    `json:\"cloud_id\" bson:\"cloud_id\"`\n    RegionID   int                    `json:\"region_id\" bson:\"region_id\"`\n    ParentID   int                    `json:\"parent_id\" bson:\"parent_id\"`\n    IPAddress  string                 `json:\"ip_address\" bson:\"ip_address\"`\n    DeviceType string                 `json:\"device_type\" bson:\"device_type\"`\n    Active     bool                   `json:\"active\" bson:\"active\"`\n    Note       string                 `json:\"note\" bson:\"note\"`\n    Labels     []Label                `json:\"labels\" bson:\"labels\"`\n    RegionUUID string                 `json:\"region_uuid\" bson:\"region_uuid\"`\n    ZoneUUID   string                 `json:\"zone_uuid\" bson:\"zone_uuid\"`\n    CloudUUID  string                 `json:\"cloud_uuid\" bson:\"cloud_uuid\"`\n    Data       map[string]interface{} `json:\"data\" bson:\"data\"`\n}\n</code></pre> Type Inventory App<pre><code>type App struct {\n    UUID        string                 `json:\"uuid\" bson:\"uuid\"`\n    Name        string                 `json:\"name\" bson:\"name\"`\n    Type        string                 `json:\"type\" bson:\"type\"`\n    Description string                 `json:\"description\" bson:\"description\"`\n    Labels      []Label                `json:\"labels\" bson:\"labels\"`\n    RegionUUID  string                 `json:\"region_uuid\" bson:\"region_uuid\"`\n    ZoneUUID    string                 `json:\"zone_uuid\" bson:\"zone_uuid\"`\n    CloudUUID   string                 `json:\"cloud_uuid\" bson:\"cloud_uuid\"`\n    Data        map[string]interface{} `json:\"data\" bson:\"data\"`\n}\n</code></pre> Type Inventory Netowrk Device<pre><code>type NetworkDevice struct {\n    UUID       string                 `json:\"uuid\" bson:\"uuid\"`\n    Name       string                 `json:\"name\" bson:\"name\"`\n    Type       string                 `json:\"type\" bson:\"type\"`\n    CloudID    int                    `json:\"cloud_id\" bson:\"cloud_id\"`\n    RegionID   int                    `json:\"region_id\" bson:\"region_id\"`\n    ParentID   int                    `json:\"parent_id\" bson:\"parent_id\"`\n    IPAddress  string                 `json:\"ip_address\" bson:\"ip_address\"`\n    DeviceType string                 `json:\"device_type\" bson:\"device_type\"`\n    Active     bool                   `json:\"active\" bson:\"active\"`\n    ModelName  string                 `json:\"model_name\" bson:\"model_name\"`\n    OSVersion  string                 `json:\"os_version\" bson:\"os_version\"`\n    VLANS      []int                  `json:\"vlans\" bson:\"vlans\"`\n    Note       string                 `json:\"note\" bson:\"note\"`\n    Labels     []Label                `json:\"labels\" bson:\"labels\"`\n    RegionUUID string                 `json:\"region_uuid\" bson:\"region_uuid\"`\n    ZoneUUID   string                 `json:\"zone_uuid\" bson:\"zone_uuid\"`\n    CloudUUID  string                 `json:\"cloud_uuid\" bson:\"cloud_uuid\"`\n    Data       map[string]interface{} `json:\"data\" bson:\"data\"`\n}\n</code></pre>"},{"location":"pixelview/automation-overview/","title":"Overview of PixelView Automation","text":"<p>PixelView Automation allows teams to configure rules and workflows that respond to alerts and events automatically, ensuring prompt handling of issues and reducing manual intervention. Automation in PixelView is particularly effective when combined with Escalation Policies, enabling seamless escalation through predefined levels when alerts remain unresolved.</p>"},{"location":"pixelview/automation-overview/#key-features-of-pixelview-automation","title":"Key Features of PixelView Automation","text":"<ol> <li>Automated Actions: PixelView Automation enables you to set up automatic responses, such as sending notifications, updating ticket statuses, or assigning alerts based on defined rules.</li> <li>Escalation Integration: Automations can be configured to work in tandem with escalation policies, triggering actions that move unresolved issues to subsequent levels, ensuring timely response and accountability.</li> <li>Customizable Triggers: Users can define trigger conditions, such as time-based triggers, specific event occurrences, or unique criteria, to ensure automation aligns with operational requirements.</li> <li>Efficient Alert Assignment: Assign alerts directly to users, on-call schedules, or automation bots, ensuring that alerts reach the right personnel or automated workflows without delay.</li> </ol>"},{"location":"pixelview/automation-overview/#how-automation-works-with-escalation-policies","title":"How Automation Works with Escalation Policies","text":"<p>In PixelView, automation is tightly integrated with Escalation Policies. Escalation Policies define a structured approach to managing unresolved alerts, and automation steps in to execute actions based on the escalation level. Each escalation level within a policy can be assigned an automation bot, user, or on-call schedule:</p> <ul> <li>Assign to Automations: Use automation bots to manage alerts according to policy-defined escalation levels, routing alerts to automated workflows.</li> <li>Assign to User: Alerts can automatically be assigned to individual team members based on their availability and role in the escalation chain.</li> <li>Assign to On-call: When an alert reaches an escalation level assigned to an on-call schedule, PixelView automatically routes the alert to the on-call team.</li> </ul> <p>This combination of automation and escalation streamlines incident response, ensuring that issues are handled efficiently and transparently across all escalation levels.</p>"},{"location":"pixelview/automation-overview/#benefits-of-using-pixelview-automation","title":"Benefits of Using PixelView Automation","text":"<ul> <li>Increased Responsiveness: Automation reduces the time required to respond to incidents by automatically handling or assigning alerts as defined.</li> <li>Consistency in Workflow: Automated processes ensure that escalation policies are followed precisely, promoting consistency across teams and incidents.</li> <li>Reduced Manual Workload: By automating recurring tasks, teams can focus on more complex issues, reducing fatigue and enhancing productivity.</li> <li>Clear Accountability: Automation and escalation integration creates a transparent process, making it clear who is responsible at each level of an alert\u2019s escalation.</li> </ul> <p>This overview provides a high-level understanding of how PixelView Automation works, especially in coordination with Escalation Policies, for an efficient and systematic alert management approach.</p>"},{"location":"pixelview/bots/","title":"Automation Bots","text":""},{"location":"pixelview/bots/#automation-bots-in-pixelview","title":"Automation Bots in PixelView","text":""},{"location":"pixelview/bots/#overview","title":"Overview","text":"<p>PixelView provides a user-friendly interface for managing automation bots. These bots help automate various tasks and integrate with other systems. This documentation will guide you through the process of adding and managing bots within PixelView.</p>"},{"location":"pixelview/bots/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Access to the PixelView interface.</li> <li>Necessary permissions to add and manage bots.</li> <li>Bot URL and authentication token for the bot you intend to add.</li> </ul>"},{"location":"pixelview/bots/#adding-a-new-bot","title":"Adding a New Bot","text":"<p>To add a new bot, follow these steps:</p> <ol> <li> <p>Navigate to the Bots Section:</p> <ul> <li>From the PixelView dashboard, click on the \"Bots\" section in the left-hand menu. </li> </ul> </li> <li> <p>Open Add Bot Dialog:</p> <ul> <li>Click on the \"+\" icon or button to open the \"Add Bot\" dialog. </li> </ul> </li> <li>Fill in Bot Details:<ul> <li>Name: Enter a unique name for your bot.</li> <li>Bot URL: Provide the URL where your bot can be reached. This should be a fully qualified domain name or IP address with the appropriate port number if necessary.</li> <li>Bot Auth Token: Enter the authentication token that your bot uses to verify its identity.</li> <li>Bot Type: Select the type of bot from the dropdown menu. Currently, \"StackStorm\" is a supported bot type.</li> </ul> </li> <li>Create Bot:<ul> <li>Click the \"CREATE\" button to add the bot. If you wish to cancel the operation, click the \"CANCEL\" button. </li> </ul> </li> </ol>"},{"location":"pixelview/bots/#managing-existing-bots","title":"Managing Existing Bots","text":"<p>Once bots are added, you can manage them from the main \"Bots\" interface. This section describes how to view and edit bot details.</p> <ol> <li> <p>View Bots:</p> <ul> <li>In the \"Bots\" section, you will see a list of all the bots you have added. Each bot entry will display:<ul> <li>Name: The name of the bot.</li> <li>URL: The bot\u2019s URL (partially masked for security).</li> <li>Auth Token: The authentication token (fully masked).</li> <li>API Key: The API key associated with the bot (fully masked).</li> <li>Type: The type of bot, such as \"StackStorm\".</li> </ul> </li> <li> <p>Bot Actions:</p> </li> <li> <p>View Details: Click the eye icon to view the full details of the bot.</p> </li> <li>Copy API Key: Click the copy icon next to the API key to copy it to the clipboard.</li> <li>Delete Bot: Click the three dots under the \"Actions\" column to delete the bot. This will bring up an option to remove it from the system. </li> </ul> </li> </ol>"},{"location":"pixelview/bots/#security-considerations","title":"Security Considerations","text":"<ul> <li>Ensure the bot URL and authentication tokens are kept secure.</li> <li>Regularly update the authentication tokens to prevent unauthorized access.</li> <li>Limit access to the bots' configuration settings to authorized personnel only.</li> </ul>"},{"location":"pixelview/bots/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If a bot is not functioning correctly, check the following:<ul> <li>Ensure the bot URL is correct and reachable.</li> <li>Verify that the authentication token is valid.</li> <li>Check the bot's logs for any error messages or issues.</li> </ul> </li> </ul>"},{"location":"pixelview/cases/","title":"Cases","text":""},{"location":"pixelview/cases/#overview","title":"Overview","text":"<p>The Cases section is where you can view and manage all of your alerts. This section provides three categories to help you organize and address issues effectively:</p> <ul> <li>Open Cases</li> <li>My Cases</li> <li>Resolved Cases</li> </ul>"},{"location":"pixelview/cases/#open-cases","title":"Open Cases","text":"<p>In the Open Cases section, you can view all newly triggered alerts from various monitoring platforms such as Zabbix, Prometheus, Nagios, etc. This section also allows you to create new cases to ensure all alerts are addressed promptly.</p> <p></p>"},{"location":"pixelview/cases/#creating-a-new-case","title":"Creating a New Case","text":"<p>To create a new case, follow these steps:</p> <ol> <li> <p>Navigate to Open Cases</p> <ul> <li>In the Cases section, click on Open Cases to view all active alerts.</li> <li> <p>Initiate Case Creation</p> </li> <li> <p>Click on the + icon located in the upper right corner of the Open Cases section. This action will open a popup window for creating a new case. </p> </li> </ul> </li> <li> <p>Fill in Case Details</p> <ul> <li>In the popup window, provide the following details for the new case:<ul> <li>Case Name: Enter a descriptive name for the new case.</li> <li>Severity: Select the appropriate severity level for the case. The severity levels are:<ul> <li>L for Low</li> <li>M for Medium</li> <li>H for High</li> <li>C for Critical</li> </ul> </li> <li>Tags: Add relevant tags to help categorize and filter the case.</li> <li>Description: Provide a detailed description of the case, including any pertinent information that will help in resolving the issue.</li> </ul> </li> <li> <p>Create the Case</p> </li> <li> <p>After filling in all the necessary details, click on the Create Case button. This will create the new case and add it to the Open Cases list.</p> </li> </ul> </li> </ol> <p>By following these steps, you can ensure that all alerts are promptly addressed and managed effectively within the Cases section.</p> <p></p>"},{"location":"pixelview/cases/#managing-alerts","title":"Managing Alerts","text":"<p>In the Open Cases section, you can manage your alerts according to your preferences. The available options include:</p> <ul> <li>Add Comments: You can add comments to any alert for better tracking and communication.</li> <li>Acknowledge Alerts: Mark alerts as acknowledged to indicate that you are aware of them.</li> <li>Manually Resolve Alerts: Resolve alerts manually if you have addressed the issue.</li> </ul>"},{"location":"pixelview/cases/#viewing-alert-details","title":"Viewing Alert Details","text":"<p>By clicking on any alert, you can access a detailed view of that alert. This detailed view offers multiple management options:</p> <ul> <li>Assign Tasks: Assign tasks related to the alert to a specific user.</li> <li>Add Observables: Include relevant observables to the alert for further analysis.</li> <li>Add or View Comments: Add new comments or view existing comments for context and updates.</li> <li>View Alert History: Review the history of the alert to track its progression and any actions taken. </li> </ul>"},{"location":"pixelview/cases/#my-cases","title":"My Cases","text":"<p>In the My Cases section, you can find alerts that are specifically assigned to you. Here, you have the ability to: </p> <ul> <li>Acknowledge Cases or Alerts: This section lists all the cases or alerts assigned to you, allowing you to acknowledge them.</li> <li>View Detailed Information: By clicking on any alert, you can view comprehensive details about it. This helps you understand the nature and specifics of the alert for better management and resolution.</li> </ul>"},{"location":"pixelview/cases/#tasks-management","title":"Tasks Management","text":"<p>The Tasks section enables you to create, manage, and assign tasks to other users. The functionalities include:</p> <ul> <li>Create New Task: You can create a new task by clicking on the 'TASKS' button. This will navigate you to the task page.</li> <li>Manage Tasks: On the task page, you can find all tasks. Here, you have the option to add new tasks.</li> <li>Add New Task:<ol> <li>Click on the 'Add Task' button.</li> <li>Provide the following details:<ul> <li>Task Title: A brief title for the task.</li> <li>Description: A detailed description of the task.</li> <li>Assign to User or Groups: Select the user or groups you want to assign the task to.</li> </ul> </li> <li>Click on the 'Create Task' button to finalize and assign the task.</li> </ol> </li> </ul>"},{"location":"pixelview/cases/#resolved-cases","title":"Resolved Cases","text":"<p>In the Resolved Case section, you can find alerts related to problems that have been fixed or resolved. If you determine that an issue is not actually resolved, you can reopen the case by following these steps:  1. Click on the '...' icon located in the last column of the alert.  2. Select 'Re-open'.  3. The alert will be reopened for further investigation and resolution.</p>"},{"location":"pixelview/create-alerts/","title":"Python Example","text":""},{"location":"pixelview/create-alerts/#creating-generic-alerts-with-python","title":"Creating Generic Alerts with Python","text":"<p>Pixelview allows users to integrate their existing moitoring backend with the system. Whatever monitoring tool you are using you can use pixelvirt to aggregate it to a central view.</p> <p>There is also a generic alerting template that allows users to integrate existing tools or any scrip they may already have to trigger or resolve alerts in Pixelview system.</p> <p>Below is an example of a simple python script that allows us to create an alert:</p> create-alerts.py<pre><code>#!/usr/bin/env python\n\nimport argparse\nimport json\nimport sys\nimport requests\n\nurl = \"https://pixelview.pixelvirt.com/api/new_event\"\n\npayload = {\n  \"alert_data\": {\"key1\": \"value1\", \"key2\": \"value2\"},\n  \"generated_by\": \"Custom Monitoring Script\",\n  \"hostname\": \"compute01.pixelview.com\",\n  \"service_name\": \"Docker\",\n  \"details\": \"Here is some details about the alert\",\n  \"tags\": \"docker,compute01\",\n  \"Title\": \"Docker service is not running\",\n  \"status\": \"trigger\", # trigger or resolve\n  \"severity\": \"CRITICAL\",\n}\n\nheaders = {\"X-Auth-Key\": \"xxxxx-abb6822810b4\"}\nresp = requests.post(url, headers=headers, data=json.dumps(payload), verify=False)\nprint(resp.status_code)\nprint(resp.text)\n</code></pre> <p>Note</p> <p>Multiple trigger with the same data will not create new alert. As long as <code>hostname</code>, <code>service_name</code>, <code>title</code> and <code>status</code> are the same, it will be treated as re-alerting and as long as an open alert with the same info exists it will not trigger new alert.</p>"},{"location":"pixelview/custom-bot/","title":"Custom Bots","text":"<p>Pixelview lets you pass your alert message to external API. This allows us to write scripts or bots to handle these alerts. This helps us handle a range of different use cases.</p> <p>Lets take a look at how to do this.</p> <p>Custom Bot Example Code<pre><code>package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n)\n\n// Base URL and credentials for API requests, modify with your user.\nvar (\n    baseURL   = \"https://x.x.x.x\"\n    username  = \"sulochan@gmail.com\"\n    apiKey    = \"3bebf0bc-xabc-40f2-9e3e-fb5d5c0ab050\"\n)\n\n// IncidentActivity represents the structure for posting incident activity\ntype IncidentActivity struct {\n    IncidentKey      string                 `json:\"incident_key\" bson:\"incident_key\"`\n    ActivityType     string                 `json:\"activity_type\" bson:\"activity_type\"`\n    Description      string                 `json:\"description\" bson:\"description\"`\n    Details          string                 `json:\"details\" bson:\"details\"`\n    ServiceName      string                 `json:\"servicename\" bson:\"servicename\"`\n    Hostname         string                 `json:\"hostname\" bson:\"hostname\"`\n    AutomationResult StackstormNotification `json:\"automation_result\" bson:\"automation_result\"`\n    RawData          interface{}            `json:\"raw_data\" bson:\"raw_data\"`\n}\n\ntype StackstormNotification struct{}\n\n// Comment represents the structure for posting a comment\ntype Comment struct {\n    Body        string `json:\"body\" bson:\"body\"`\n    TaskUUID    string `json:\"task_uuid\" bson:\"task_uuid\"`\n    CaseUUID    string `json:\"case_uuid\" bson:\"case_uuid\"`\n    IncidentKey string `json:\"incident_key\" bson:\"incident_key\"`\n}\n\n// alertHandler handles incoming requests to /alerts and processes the data\nfunc alertHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method == http.MethodPost {\n        // Read the body of the request\n        body, err := ioutil.ReadAll(r.Body)\n        if err != nil {\n            log.Println(\"Error reading request body:\", err)\n            http.Error(w, \"Unable to read request body\", http.StatusBadRequest)\n            return\n        }\n        defer r.Body.Close()\n\n        // Print the received data\n        fmt.Printf(\"Received alert: %s\\n\", string(body))\n\n        // Parse the JSON body into a map to extract required values\n        var msgData map[string]interface{}\n        if err := json.Unmarshal(body, &amp;msgData); err != nil {\n            log.Println(\"Invalid JSON format:\", err)\n            http.Error(w, \"Invalid JSON format\", http.StatusBadRequest)\n            return\n        }\n\n        // Extract incident key from the message\n        incidentKey, ok := msgData[\"incident_key\"].(string)\n        if !ok {\n            log.Println(\"Incident key not found in the message\")\n            http.Error(w, \"Incident key not found in the message\", http.StatusBadRequest)\n            return\n        }\n\n        // Extract other values from the msgData as necessary, using default values if not found\n        serviceName := \"Unknown Service\"\n        if val, ok := msgData[\"service_name\"].(string); ok {\n            serviceName = val\n        }\n\n        hostname := \"Unknown Host\"\n        if val, ok := msgData[\"hostname\"].(string); ok {\n            hostname = val\n        }\n\n        // Create an instance of IncidentActivity\n        incidentActivity := IncidentActivity{\n            IncidentKey:  incidentKey,\n            ActivityType: \"Automation: Received\",                 // Static value for this example\n            Description:  \"An alert was received and processed.\", // You can modify this based on message details\n            Details:      string(body),                           // Store the full message in Details\n            ServiceName:  serviceName,                            // Extracted from message\n            Hostname:     hostname,                               // Extracted from message\n            RawData:      msgData,                                // Store raw message data\n        }\n\n        // Post the IncidentActivity to the specified URL\n        postURL := fmt.Sprintf(\"%s/api/alerts/%s/activities\", baseURL, incidentKey)\n        err = postIncidentActivity(postURL, incidentActivity)\n        if err != nil {\n            log.Println(\"Failed to post to external API:\", err)\n            http.Error(w, fmt.Sprintf(\"Failed to post to external API: %v\", err), http.StatusInternalServerError)\n            return\n        }\n\n        // Post a comment after the incident activity\n        commentBody := `This is a multi line comment.\nThis is line 2.\nLine 3 ... and so on.`\n        comment := Comment{\n            Body:        commentBody,\n            IncidentKey: incidentKey,\n        }\n        err = postComment(fmt.Sprintf(\"%s/api/comment_create\", baseURL), comment)\n        if err != nil {\n            log.Println(\"Failed to post comment:\", err)\n            http.Error(w, fmt.Sprintf(\"Failed to post comment: %v\", err), http.StatusInternalServerError)\n            return\n        }\n\n        // Respond back to the client\n        w.WriteHeader(http.StatusOK)\n        w.Write([]byte(\"Alert received and processed, comment added\"))\n    } else {\n        log.Println(\"Invalid request method:\", r.Method)\n        http.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n    }\n}\n\n// postIncidentActivity posts the incident activity to the external API\nfunc postIncidentActivity(url string, activity IncidentActivity) error {\n    data, err := json.Marshal(activity)\n    if err != nil {\n        log.Println(\"Failed to marshal incident activity:\", err)\n        return fmt.Errorf(\"failed to marshal incident activity: %w\", err)\n    }\n\n    req, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(data))\n    if err != nil {\n        log.Println(\"Failed to create request:\", err)\n        return fmt.Errorf(\"failed to create request: %w\", err)\n    }\n\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"X-Username\", username)   // Use the username variable\n    req.Header.Set(\"X-API-Key\", apiKey)      // Use the apiKey variable\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Failed to send request:\", err)\n        return fmt.Errorf(\"failed to send request: %w\", err)\n    }\n    defer resp.Body.Close()\n\n    if resp.StatusCode != http.StatusOK {\n        log.Println(\"Received non-OK response code:\", resp.StatusCode)\n        return fmt.Errorf(\"received non-OK response code: %d\", resp.StatusCode)\n    }\n\n    return nil\n}\n\n// postComment posts a comment to the external API\nfunc postComment(url string, comment Comment) error {\n    data, err := json.Marshal(comment)\n    if err != nil {\n        log.Println(\"Failed to marshal comment:\", err)\n        return fmt.Errorf(\"failed to marshal comment: %w\", err)\n    }\n\n    req, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(data))\n    if err != nil {\n        log.Println(\"Failed to create request:\", err)\n        return fmt.Errorf(\"failed to create request: %w\", err)\n    }\n\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"X-Username\", username)   // Use the username variable\n    req.Header.Set(\"X-API-Key\", apiKey)      // Use the apiKey variable\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Failed to send request:\", err)\n        return fmt.Errorf(\"failed to send request: %w\", err)\n    }\n    defer resp.Body.Close()\n\n    if resp.StatusCode != http.StatusOK {\n        log.Println(\"Received non-OK response code for comment:\", resp.StatusCode)\n        return fmt.Errorf(\"received non-OK response code for comment: %d\", resp.StatusCode)\n    }\n\n    return nil\n}\n\nfunc main() {\n    // Register the /alerts route with alertHandler\n    http.HandleFunc(\"/alerts\", alertHandler)\n\n    // Start the server on port 8383\n    port := \":8383\"\n    fmt.Printf(\"Server is listening on port %s...\\n\", port)\n    log.Fatal(http.ListenAndServe(port, nil))\n}\n</code></pre> Build and run this code will create a http server that listens on port 8383. Now, in order to use this, we simply create a new bot from settings and use it in our escalation path.</p> <p></p> <p>Once the bot is created assign it to your escalation path.</p> <p></p> <p>Now, every alert that comes in through any service that is using this escalation policy, will receive the alert. This will allow the bot to do custom work and take action on the alerts.</p>"},{"location":"pixelview/custom-dashboard/","title":"Custom Dashborad","text":"<p>Pixelview dashboard is done in a way that allows users to expose data from any application to show in Pixelview. The dashboard expect you to expose your own dashboard/data and simply calls your data to show in Pixelview.</p>"},{"location":"pixelview/custom-dashboard/#get-chart","title":"get-chart","text":"<p>/get-charts <pre><code>{\n    \"charts\":[\n        {\n            \"name\": \"chart-name-1\",\n            \"source\": \"data-url-for-chart-1\"\n        },\n        {\n            \"name\": \"chart-name-2\",\n            \"source\": \"data-url-for-chart-2\"\n        }\n    ]\n}\n</code></pre></p>"},{"location":"pixelview/custom-dashboard/#table","title":"table","text":"<p>/list-object-details?object=\"object-id\" (data-source-url-for-dashboard) <pre><code>{\n    \"name\": \"example-name\",\n    \"type\": \"table\",\n    \"labels\": [\"label-1\", \"label-2\", \"label-3\"],\n    \"source_name\": \"source-name\",\n    \"data\": [\n        {\n            \"values\": [\"data-1\", \"data-2\", \"data-3\"],\n            \"on_click_action\": \"\",\n            \"source\": \"on-click-action-data-source-url\"\n        }\n    ]\n}\n</code></pre> note: on_click_action can be popup, newpage</p> <p>if on_click_action is \"popup\", then json will be displayed in the popup window. if on_click_action is \"newpage\", then follow the following format, <pre><code>{\n    \"name\": \"display-title-name\",\n    \"charts\":[\n        {\n            \"name\": \"chart-name-1\",\n            \"source\": \"data-url-for-chart-1\"\n        },\n        {\n            \"name\": \"chart-name-2\",\n            \"source\": \"data-url-for-chart-2\"\n        }\n    ] ,\n    \"status\": \"object-status\",\n    \"cards\": [\n        {\n            \"name\": \"card-name-1\",\n            \"value\": \"value1\"\n        },\n        {\n            \"name\": \"card-name-2\",\n            \"value\": \"value2\"\n        }\n    ]\n}\n</code></pre></p>"},{"location":"pixelview/custom-dashboard/#piechart","title":"piechart","text":"<p>/list-object-details?object=\"object-id\" (data-source-url-for-dashboard) <pre><code>{\n    \"name\": \"example-name\",\n    \"type\": \"piechart\",\n    \"labels\": [\"label-1\", \"label-2\", \"label-3\"],\n    \"source_name\": \"source-name\",\n    \"data\": [1, 2.1, 3.7]\n}\n</code></pre></p>"},{"location":"pixelview/custom-dashboard/#linechart","title":"linechart","text":"<p>/list-object-details?object=\"object-id\" (data-source-url-for-dashboard) <pre><code>{\n    \"name\": \"example-name\",\n    \"type\": \"linechart\",\n    \"source_name\": \"source-name\",\n    \"axis\": [\"x-axis-lebel\", \"y-axix-lebel\"],\n    \"min\": 0,\n    \"max\": 100,\n    \"series\": [\n        {\n            \"name\": \"line-name-1\",\n            \"data\": [ [1.2, 2.1], [3, 4.3] ]\n        },\n        {\n            \"name\": \"line-name-2\",\n            \"data\": [ [4, 5.2], [7.7, 8.1] ]\n        }\n    ],\n}\n</code></pre></p>"},{"location":"pixelview/custom-dashboard/#barchart","title":"barchart","text":"<p>/list-object-details?object=\"object-id\" (data-source-url-for-dashboard) <pre><code>{\n    \"name\": \"example-name\",\n    \"type\": \"barchart\",\n    \"source_name\": \"source-name\",\n    \"axis\": [\"x-axis-lebel\", \"y-axix-lebel\"],\n    \"min\": 0,\n    \"max\": 100,\n    \"series\": [\n        {\n            \"name\": \"line-name-1\",\n            \"data\": [ [1.2, 2.1], [3, 4.3] ]\n        },\n        {\n            \"name\": \"line-name-2\",\n            \"data\": [ [4, 5.2], [7.7, 8.1] ]\n        }\n    ],\n}\n</code></pre></p>"},{"location":"pixelview/dashboard/","title":"Overview","text":"<p>This document guides you through creating a personalized dashboard experience within the application. The default login page transitions into a fully customizable dashboard where you can add widgets tailored to your preferences.</p> <p>Adding Widgets</p> <ol> <li> <p>Access the Add New Charts Option: Locate and click the \"Add New Charts\" button within the dashboard interface. This action triggers a pop-up window. </p> </li> <li> <p>Add a New Data Source: Within the pop-up window, select the \"Add Source\" option. A new window titled \"Add Chart Source\" will appear. </p> </li> <li> <p>Define Your Data Source:</p> <ul> <li>Click the Plus Icon (+): In the upper right corner of the \"Add Chart Source\" window, click the plus icon (+) to initiate the data source creation process. </li> <li>Provide a Source Name: Assign a descriptive and meaningful name to your data source for easy identification later.</li> <li>Enter the Metric URL: In the designated URL section, meticulously paste the exact URL that points to the data metrics you want to visualize on your dashboard.</li> <li>Token Inclusion (Optional): If the data source necessitates an access token for authentication, enter the valid token in the provided field. Tokens are often used to secure access to restricted data.</li> <li>Click Submit: Once you've entered the necessary details, click the \"Submit\" button to confirm the creation of your data source. </li> </ul> </li> <li> <p>Select Visualization Options: Upon successful data source creation, you'll be presented with various widget options suitable for displaying the data effectively on your dashboard. Common options include:</p> <ul> <li>Bar Charts: Ideal for depicting comparisons between different categories.</li> <li>Line Charts: Well-suited for showcasing trends over time.</li> <li>Pie Charts: Effective for illustrating the relative proportions of components within a whole.</li> <li>Tables: Provide a structured view of your data, especially when dealing with numerous data points.</li> </ul> <p>Carefully consider the nature of your data and the insights you aim to glean when selecting the most appropriate visualization type. </p> </li> <li> <p>Finalize Your Dashboard: Once you've selected the desired widget type(s), click the \"Submit\" button to confirm your selections. Your personalized dashboard will now reflect the chosen widgets, displaying the data from your defined data sources. </p> </li> </ol>"},{"location":"pixelview/dashboard/#resizing-and-repositioning-widgets-on-your-dashboard","title":"Resizing and Repositioning Widgets on Your Dashboard","text":"<p>This guide will show you how to customize your dashboard by resizing and repositioning your widgets.</p> <p>Prerequisites:</p> <ul> <li> <p>You must be in view mode for your dashboard. To edit your dashboard, locate the \"Edit Dashboard\" button (usually next to \"Add New Chart\").</p> </li> <li> <p>Access Dashboard Editing Mode:</p> <ul> <li>Begin by navigating to your dashboard interface.</li> <li>Locate the \"Edit Dashboard\" option. This is typically found next to the \"Add New Chart\" button. Click on \"Edit Dashboard\" to enter editing mode. </li> </ul> </li> <li> <p>Select Widget for Resizing or Repositioning:</p> <ul> <li>Once in editing mode, you'll see all the widgets available on your dashboard.</li> <li>Choose the widget you wish to resize or reposition by clicking on it.</li> </ul> </li> <li>Repositioning a Widget:<ul> <li>To reposition a widget, click and hold on the widget you've selected.</li> <li>Drag the widget to the desired location on the dashboard.</li> <li>Release the mouse button to drop the widget into place.</li> </ul> </li> <li>Resizing a Widget:<ul> <li>To resize a widget, locate the bottom-right corner of the widget. </li> <li>Click and hold on the resizing handle (usually indicated by a small triangle or square).</li> <li>Drag the handle diagonally to adjust the size of the widget.</li> <li>Release the mouse button when you're satisfied with the new size.</li> </ul> </li> <li>Save Changes:<ul> <li>After resizing or repositioning the widget(s) to your liking, it's important to save your changes.</li> <li>Look for the \"Save Changes\" button located next to the \"Add New Chart\" option.</li> <li>Click on \"Save Changes\" to apply the modifications to your dashboard. </li> </ul> </li> </ul> <p>By following these simple steps, you can easily resize and reposition widgets on your dashboard, allowing you to create a layout that best suits your workflow and preferences. Take advantage of these customization options to optimize your dashboard for efficiency and usability</p>"},{"location":"pixelview/esclation/","title":"Escalation Policy","text":"<p>An Escalation Policy is a defined protocol that ensures alerts are addressed promptly and efficiently. It outlines the steps and responsible parties involved in escalating an issue until it is resolved. The policy typically includes multiple levels of escalation, specifying how and when the alert should move to the next level if it remains unresolved.</p>"},{"location":"pixelview/esclation/#creating-a-new-escalation-policy","title":"Creating a New Escalation Policy","text":"<p>To create a new Escalation Policy, follow these steps:</p> <ol> <li> <p>Accessing the New Policy Page:</p> <ul> <li>Click on the 'Add Policy' option.</li> <li>You will be redirected to the New Escalation Policy creation page. </li> </ul> </li> <li> <p>Naming the Policy:</p> <ul> <li>Provide a name for the new policy.</li> <li>Click on the \"Create Template\" button. </li> </ul> </li> <li> <p>Editing the Policy:</p> <ul> <li>You will be redirected to the policy edit page.</li> <li>Here, you can add different levels to the policy. </li> </ul> </li> <li> <p>Adding Escalation Levels:</p> <ul> <li>To add a new level of escalation, click on the '+' icon. </li> <li>You will see three drop-down options: <ul> <li>Assign to Automations: Select this option if you want to assign the alert to an automation bot. You must select a bot that has been previously created. If no bots are available, refer to the management section for detailed instructions on creating one.</li> <li>Assign to User: Select this option to assign the alert to a specific user.</li> <li>Assign to On-call: Select this option to assign the alert to an on-call schedule. The on-call team members will handle the alert based on the schedule.</li> </ul> </li> </ul> </li> <li> <p>Configuring Escalation Timing:</p> <ul> <li>Adjust the value for \"Escalate to next level\" to specify the time (in minutes) after which the alert should escalate if unresolved. The default is set to 10 minutes. Escalation Timing</li> <li>Add additional levels of escalation as required.</li> </ul> </li> <li> <p>Saving the Policy:</p> <ul> <li>After configuring all parameters, click on the \"Update Template\" button to save the policy.</li> </ul> </li> </ol>"},{"location":"pixelview/esclation/#policies-management","title":"Policies Management","text":""},{"location":"pixelview/esclation/#overview","title":"Overview","text":"<p>In this section, you will find information about how to manage policies within the application. This includes viewing, editing, and deleting policies. Policies can be used for various services according to your requirements.</p>"},{"location":"pixelview/esclation/#accessing-policies","title":"Accessing Policies","text":"<p>To access the Policies section: 1. Navigate to the main menu and select \"Policies.\"  2. Here, you will see a list of all the policies that you have created.</p>"},{"location":"pixelview/esclation/#viewing-policies","title":"Viewing Policies","text":""},{"location":"pixelview/esclation/#policy-list","title":"Policy List","text":"<ul> <li>All created policies are displayed in a table format.</li> <li>Each row represents a single policy, with details such as the policy name, description, and associated services.</li> </ul>"},{"location":"pixelview/esclation/#viewing-services-using-a-policy","title":"Viewing Services Using a Policy","text":"<ul> <li>In the first column of the policy list, there is a 'V' button for each policy.</li> <li>Click the 'V' button to expand the view and see which services are currently using that escalation policy.  s</li> </ul>"},{"location":"pixelview/esclation/#managing-policies","title":"Managing Policies:","text":"<ul> <li>The Action Menu (...) in the last column provides options for editing and deleting policies.         - Edit: Clicking \"Edit\" allows you to modify the existing policy configuration.         - Delete: Clicking \"Delete\" permanently removes the selected policy. Use caution when deleting policies, as it may affect services that rely on it.</li> </ul>"},{"location":"pixelview/incident_documentation/","title":"Incident Case Documentation","text":""},{"location":"pixelview/incident_documentation/#incident-case-documentation","title":"Incident Case Documentation","text":""},{"location":"pixelview/incident_documentation/#1-incident-details","title":"1. Incident Details","text":"<ul> <li> <p>Incident Management Info: This section provides the URL or additional information regarding the incident management process.     Example: <code>https://google.com</code></p> </li> <li> <p>Current Incident Commander: The person leading the resolution of the incident. Example: <code>Jake Coe</code></p> </li> <li> <p>Communication Lead: The individual responsible for maintaining communication during the incident. Example: <code>Alex Smith</code></p> </li> <li> <p>Status: This shows the current status of the incident. Use clear labels such as \"OPEN\", \"IN PROGRESS\", or \"CLOSED.\" Example: <code>CLOSED</code></p> </li> <li> <p>Summary: A concise description of what caused the incident and the resulting impact. Example: <code>The database cluster went down and made the cloud suck.</code></p> </li> </ul>"},{"location":"pixelview/incident_documentation/#2-sections-for-additional-details","title":"2. Sections for Additional Details","text":"<ul> <li> <p>TODO and Bugs Filed: Use this section to list the tasks required to resolve the incident and any bugs that have been filed in relation to the issue.</p> </li> <li> <p>Incident Timeline: Document a timeline of events as they occurred during the incident. This can include timestamps for when the issue was detected, when mitigation actions were taken, and when resolution was achieved.</p> </li> <li> <p>Related Cases: List any cases or incidents that may be connected to this one for better tracking and historical analysis.</p> </li> </ul>"},{"location":"pixelview/incident_documentation/#3-incident-case-structure-example","title":"3. Incident Case Structure Example","text":"Field Description Example Incident Management Info Link or document related to incident management processes. <code>https://google.com</code> Current Incident Commander The person responsible for managing the resolution. <code>Jake Coe</code> Communication Lead The person leading communication efforts during the incident. <code>Alex Smith</code> Status The current state of the incident (e.g., OPEN, CLOSED). <code>CLOSED</code> Summary A brief description of the issue and its impact. <code>The database cluster went down...</code> <p>This structure can help standardize how you record incidents in the PixelView system. If you need further modifications or specific features, feel free to let me know!</p>"},{"location":"pixelview/install-on-docker/","title":"Installation","text":"<p>Like Docker? So do we!</p> <p>One of the quickest ways to get pixelview running is using Docker. This page will show you the basics of how to use pixelview  with Docker.</p>"},{"location":"pixelview/install-on-docker/#host-requirements","title":"Host Requirements","text":"<p>Before proceeding with the installation, ensure that you have Docker and Docker Compose installed on your system. To do so you can follow the instructions provided on the docker's website.</p>"},{"location":"pixelview/install-on-docker/#steps-to-install","title":"Steps to Install","text":""},{"location":"pixelview/install-on-docker/#1-copy-docker-compose-file","title":"1. Copy Docker Compose File","text":"<p>Create a directory for your project and create a file named <code>docker-compose.yml</code>. Copy the provided service configurations into this file.</p> docker-compose.yaml<pre><code>version: \"3.9\"\n\nservices:\n  escalation:\n    image: ghcr.io/pixelvirt/escalation:latest\n    restart: always\n    depends_on:\n      - rabbitmq\n    extra_hosts:\n      - \"mongoservice:172.17.0.1\"\n      - \"rabbitmqservice:172.17.0.1\"\n    environment:\n      MONGOURL: \"mongoservice:27018\"\n      RABBITURL: \"amqp://alertagility:vcW41MPUlM54uw@rabbitmqservice:5673/alertagility\"\n\n  finEscalation:\n    image: ghcr.io/pixelvirt/findescalation:latest\n    restart: always\n    depends_on:\n      - rabbitmq\n    extra_hosts:\n      - \"mongoservice:172.17.0.1\"\n      - \"rabbitmqservice:172.17.0.1\"\n    environment:\n      MONGOURL: \"mongoservice:27018\"\n      RABBITURL: \"amqp://alertagility:vcW41MPUlM54uw@rabbitmqservice:5673/alertagility\"\n\n  alertagility:\n    image: ghcr.io/pixelvirt/alertagility:latest\n    restart: always\n    ports:\n      - \"9090:9090\"\n    depends_on:\n      - rabbitmq\n    extra_hosts:\n      - \"mongoservice:172.17.0.1\"\n      - \"rabbitmqservice:172.17.0.1\"\n    environment:\n      MONGOURL: \"mongoservice:27018\"\n      DOMAIN: \"demo.pixelvirt.com\"\n      RABBITURL: \"amqp://alertagility:wq:vcW41MPUlM54uw@rabbitmqservice:5673/alertagility\"\n\n  rabbitmq:\n    image: ghcr.io/pixelvirt/inithive-rabbitmq:latest\n    restart: always\n    ports:\n      - \"5673:5672\"\n    environment:\n      - RABBITMQ_PASSWORD=vcW41MPUlM54uw\n      - RABBITMQ_USER=alertagility\n\n  mongodb:\n    image: mongo:5\n    ports:\n      - \"27018:27017\"\n    volumes:\n      - ./data:/data/db\n\n  alert-frontend:\n    image: ghcr.io/pixelvirt/alertagility-frontend:v2\n    restart: always\n    depends_on:\n      - alertagility\n    ports:\n      - \"80:80\"\n    environment:\n      - BACKEND_URL=alertagility:9090\n</code></pre>"},{"location":"pixelview/install-on-docker/#11-clone-git-repository-alternative-to-manually-creating-manifests-files","title":"1.1 Clone Git Repository (Alternative to Manually Creating manifests Files)::","text":"<p>Clone the repository containing the Docker manifests:</p> <pre><code>git clone  git@github.com:pixelvirt/pixelview-docker.git\ncd pixelview-docker/installation\n</code></pre> \ud83d\udca1 Note: Find DOMAIN and replace it with your actual domain name and adjust environments according to your system."},{"location":"pixelview/install-on-docker/#2-start-the-containers","title":"2. start the containers","text":"<p>Open a terminal window, navigate to the directory where the <code>docker-compose.yml</code> file is located, and run the following command:</p> <pre><code>docker compose up -d\n</code></pre> <p>This command will start all the services in detached mode, meaning they will run in the background.</p>"},{"location":"pixelview/install-on-docker/#3-verify-installation","title":"3. Verify Installation","text":"<p>After running the <code>docker-compose up -d</code> command, you can verify that the services are running by executing:</p> <pre><code>docker compose ps\n</code></pre> <p>This command will display the status of all the services defined in the <code>docker-compose.yml</code> file.</p>"},{"location":"pixelview/install-on-docker/#4-accessing-the-application","title":"4. Accessing the Application","text":"<p>Once the services are up and running, you can access the frontend application by opening a web browser and navigating to <code>http://localhost</code>.</p>"},{"location":"pixelview/install-on-docker/#5-stopping-services","title":"5. Stopping Services","text":"<p>To stop the running services, execute the following command:</p> <pre><code>docker compose down\n</code></pre> <p>This will stop and remove all containers defined in the <code>docker-compose.yml</code> file.</p>"},{"location":"pixelview/install-on-docker/#notes","title":"Notes","text":"<ul> <li> <p>The default username to access the frontend is <code>admin@localhost</code></p> </li> <li> <p>The default password is <code>password</code></p> </li> <li> <p>The services are configured to automatically restart (<code>restart: always</code>) in case of failures or system reboots.</p> </li> <li> <p>The <code>depends_on</code> directive is used to define service dependencies, ensuring that dependent services are started before the dependent ones.</p> </li> <li> <p>Ensure that your system meets the resource requirements for running the services, especially for memory and CPU.</p> </li> <li> <p>You can customize environment variables and port mappings in the <code>docker-compose.yml</code> file as needed.</p> </li> </ul> <p>With these instructions, you should be able to successfully download and install the PixelView Services on your system. If you encounter any issues or have questions, refer to the Docker and Docker Compose documentation or feel free to ask for assistance.</p>"},{"location":"pixelview/k8s-integration/","title":"Kubernetes Integration","text":""},{"location":"pixelview/k8s-integration/#overview","title":"Overview","text":"<p>This guide outlines how to integrate Kubernetes with the PixelView application, allowing it to utilize Kubernetes resources effectively. You will learn how to deploy the application using Kubernetes with appropriate configurations.</p>"},{"location":"pixelview/k8s-integration/#deployment-methods","title":"Deployment Methods","text":"<ol> <li>Kubernetes K8s-manifest-files.</li> <li>Docker DockerFile.</li> </ol>"},{"location":"pixelview/k8s-integration/#1-deploy-on-kubernetes","title":"1. Deploy on Kubernetes","text":""},{"location":"pixelview/k8s-integration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Kubernetes Cluster: Ensure you have a Kubernetes cluster running and <code>kubectl</code> configured to connect to it.</li> <li>Service Account: Create a service account named <code>pixelview-sa</code> in the <code>pixelview</code> namespace with appropriate permissions.</li> </ol>"},{"location":"pixelview/k8s-integration/#configuration-files","title":"Configuration Files","text":"<p>You will use the following YAML files:</p> <ul> <li><code>configmap.yaml</code>: Defines configuration parameters for the application.</li> <li><code>deployment.yaml</code>: Deploys the application as a Kubernetes Deployment.</li> <li><code>service.yaml</code>: Exposes the application externally using a LoadBalancer type Service.</li> <li><code>clusterrole.yaml</code>: Defines a ClusterRole with permissions to access various Kubernetes resources.</li> <li><code>clusterrolebinding.yaml</code>: Binds the ClusterRole to the <code>pixelview-sa</code> service account.</li> </ul>"},{"location":"pixelview/k8s-integration/#step-by-step-setup","title":"Step-by-Step Setup","text":""},{"location":"pixelview/k8s-integration/#11-create-a-configmap","title":"1.1 Create a ConfigMap","text":"<p>Create a ConfigMap named <code>app-config</code> in the <code>pixelview</code> namespace using the following <code>configmap.yaml</code>: <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\n  namespace: pixelview\ndata:\n  GET_CONFIG_FROM: in-cluster\n  KUBECONFIG_FILE: /usr/src/app/kube-config\n  DATA_IP: &lt;DATA_IP&gt;  # Replace with the IP address of the host machine where the application is deployed\n  DATA_PORT: &lt;DATA_PORT&gt;  # Replace with the port number on which the application is running\n</code></pre> Apply the ConfigMap: <pre><code>kubectl apply -f configmap.yaml\n</code></pre></p>"},{"location":"pixelview/k8s-integration/#12-create-service-account","title":"1.2 Create Service Account","text":"<p>To incorporate the creation of a service account (<code>pixelview-sa</code>) into your Kubernetes setup, follow these steps. This service account will be used by your application deployment (<code>k8s-info-deployment</code>) within the <code>pixelview</code> namespace.</p> <p>Create a YAML file (<code>serviceaccount.yaml</code>) with the following content: <pre><code>apiVersion: v1 \nkind: ServiceAccount\nmetadata:\n  name: pixelview-sa\n  namespace: pixelview\n</code></pre> Apply Service Account  Apply the ServiceAccount to create it in your Kubernetes cluster: <pre><code>kubectl apply -f serviceaccount.yaml\n</code></pre></p>"},{"location":"pixelview/k8s-integration/#13-deploy-application","title":"1.3 Deploy Application","text":"<p>Deploy your application using a Deployment named <code>k8s-info-deployment</code> in the <code>pixelview</code> namespace with the following <code>deployment.yaml</code>:</p> <p><pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: k8s-monitoring\n  namespace: pixelview\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: k8s-info\n  template:\n    metadata:\n      labels:\n        app: k8s-info\n    spec:\n      serviceAccountName: pixelview-sa\n      containers:\n        - name: k8s-monitoring-pod\n          image: ghcr.io/pixelvirt/kubernetes-go:latest\n          ports:\n            - containerPort: 9090 \n          env:\n            - name: GET_CONFIG_FROM\n              valueFrom:\n                configMapKeyRef:\n                  name: app-config\n                  key: GET_CONFIG_FROM\n            - name: KUBECONFIG_FILE\n              valueFrom:\n                configMapKeyRef:\n                  name: app-config\n                  key: KUBECONFIG_FILE\n            - name: DATA_IP\n              valueFrom:\n                configMapKeyRef:\n                  name: app-config\n                  key: DATA_IP\n            - name: DATA_PORT\n              valueFrom:\n                configMapKeyRef:\n                  name: app-config\n                  key: DATA_PORT\n</code></pre> Deploy the application: <pre><code>kubectl apply -f deployment.yaml\n</code></pre></p>"},{"location":"pixelview/k8s-integration/#14-expose-application","title":"1.4 Expose Application","text":"<p>Expose your application externally using a LoadBalancer type Service named <code>k8s-info-service</code> in the <code>pixelview</code> namespace with the following <code>service.yaml</code>: <pre><code>apiVersion: v1 \nkind: Service\nmetadata:\n  name: k8s-monitoring-service\n  namespace: pixelview\nspec:\n  selector:\n    app: k8s-info\n  ports:\n    - protocol: TCP\n      port: 9091\n      targetPort: 9091\n  externalIPs:\n    - &lt;EXTERNAL_IP&gt; # Replace with your desired external IP\n</code></pre></p>"},{"location":"pixelview/k8s-integration/#15-configure-rbac","title":"1.5 Configure RBAC","text":"<p>Ensure your <code>pixelview-sa</code> service account has the necessary permissions using RBAC. Use the following <code>clusterrole.yaml</code> to define a ClusterRole: <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: full-access\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"pods\", \"services\", \"endpoints\", \"nodes\", \"namespaces\", \"ingresses\", \"events\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"apps\"]\n    resources: [\"deployments\", \"daemonsets\", \"replicasets\", \"statefulsets\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"batch\"]\n    resources: [\"jobs\", \"cronjobs\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"rbac.authorization.k8s.io\"]\n    resources: [\"roles\", \"rolebindings\", \"clusterroles\", \"clusterrolebindings\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"autoscaling\"]\n    resources: [\"horizontalpodautoscalers\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"policy\"]\n    resources: [\"poddisruptionbudgets\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"extensions\", \"networking.k8s.io\"]\n    resources: [\"ingresses\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n</code></pre> Apply the ClusterRole: <pre><code>kubectl apply -f clusterrole.yaml\n</code></pre> Bind the ClusterRole to <code>pixelview-sa</code> with <code>clusterrolebinding.yaml</code>: <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: full-access-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: full-access\nsubjects:\n  - kind: ServiceAccount\n    name: pixelview-sa\n    namespace: pixelview\n</code></pre> Apply the ClusterRoleBinding: <pre><code>kubectl apply -f clusterrolebinding.yaml\n</code></pre></p>"},{"location":"pixelview/k8s-integration/#16-clone-repository-alternative-to-manually-creating-deployment-files","title":"1.6 Clone Repository (Alternative to Manually Creating Deployment Files):","text":"<p>If you prefer not to create deployment files manually, you can clone the repository containing the Kubernetes manifests: <pre><code>git clone https://github.com/your-repo-path/k8s-pixelview \ncd k8s-pixelview\nkubectl apply -f k8s-integration\n</code></pre></p>"},{"location":"pixelview/k8s-integration/#verify-deployment","title":"Verify Deployment","text":""},{"location":"pixelview/k8s-integration/#check-pods","title":"Check Pods","text":"<p>Verify that the deployment is running:</p> <pre><code>kubectl get pods -n pixelview\n</code></pre>"},{"location":"pixelview/k8s-integration/#view-logs","title":"View Logs","text":"<p>To view logs: <pre><code>kubectl logs &lt;pod-name&gt; -n pixelview\n</code></pre></p>"},{"location":"pixelview/k8s-integration/#section-2-docker-deployment-for-pixelview-integration","title":"Section 2: Docker Deployment for PixelView Integration","text":""},{"location":"pixelview/k8s-integration/#21-docker-compose-configuration","title":"2.1 Docker Compose Configuration","text":"<p>Create a <code>docker-compose.yml</code> file with the following content: <pre><code>version: '3'\nservices:\n  k8s-monitoring:\n    restart: always\n    image: ghcr.io/pixelvirt/kubernetes-go:latest\n    env_file:\n      - .env\n    ports:\n      - \"9091:9091\"\n    container_name: k8s-monitoring\n    volumes:\n      - /usr/src/app/:/usr/src/app/\n</code></pre> Additionally, create a <code>.env</code> file with the following content: <pre><code>GET_CONFIG_FROM=out-of-cluster\nKUBECONFIG_FILE=/usr/src/app/kube-config\nDATA_IP=http://10.0.0.15 # Replace with the IP address of the host machine where the application is deployed\nDATA_PORT=9091   # Replace with the port number on which the application is running\n</code></pre></p> <p>The <code>.env</code> file stores the environment variables that the Docker service will use during deployment.</p> <p>Note</p> <p>To integrate Kubernetes on PixelView using Docker, you need a valid <code>kubeconfig</code> file. Save this file at the following location on the host machine: <code>/usr/src/app/kube-config</code>.This file is essential for connecting to the Kubernetes cluster.</p>"},{"location":"pixelview/k8s-integration/#22-deploy-the-application-with-docker","title":"2.2 Deploy the Application with Docker","text":"<p>Once the <code>docker-compose.yml</code>, <code>.env</code>, and <code>kubeconfig</code> files are ready, navigate to the directory where these files are located and run the following command to deploy the application: <pre><code>docker-compose up -d\n</code></pre> This command will start the service in the background.</p>"},{"location":"pixelview/k8s-integration/#23-clone-git-repository-alternative-to-manually-creating-deployment-files","title":"2.3 Clone Git Repository (Alternative to Manually Creating Deployment Files)","text":"<p>If you'd rather not manually create the <code>docker-compose.yml</code> and <code>.env</code> files, you can clone the repository that contains the Docker manifests for Kubernetes integrations:</p> <pre><code>git clone https://github.com/pixelvirt/pixelview-docker.git\ncd pixelview-docker/k8s-integration\n</code></pre>"},{"location":"pixelview/k8s-integration/#24-verification","title":"2.4 Verification","text":"<p>To verify the application is running:</p> <ol> <li>Check the logs: <pre><code>docker-compose logs k8s-monitoring\n</code></pre></li> </ol>"},{"location":"pixelview/k8s-integration/#verify-metrics-on-the-pixelview-dashboard","title":"Verify Metrics on the PixelView Dashboard","text":"<p>To verify or check metrics on the PixelView dashboard after deployment, follow these steps to configure a new chart:</p> <ol> <li> <p>Access Dashboard Edit Mode:</p> <ul> <li>Navigate to your PixelView dashboard.</li> <li>Click on \"Edit Dashboard\" to enter edit mode.</li> <li> <p>Add New Chart:</p> </li> <li> <p>Locate the option to \"Add New Chart\" and click on it to create a new visualization.</p> </li> <li> <p>Add New Source:</p> </li> <li> <p>Look for an option to \"Add New Source\" and click on it to configure a new data source.</p> </li> <li> <p>Configure Data Source:</p> </li> <li> <p>Provide an appropriate name for the data source.</p> </li> <li>In the URL section, enter the endpoint URL: <code>http://&lt;DATA_IP&gt;:&lt;DATA_PORT&gt;/kubernetes/api/get-charts</code>.<ul> <li>Replace <code>&lt;DATA_IP&gt;</code> with the actual IP address of the host machine where your application is deployed.</li> <li>Replace <code>&lt;DATA_PORT&gt;</code> with the port number configured for your application.</li> </ul> </li> <li> <p>Save and Display Metrics:</p> </li> <li> <p>After configuring the data source, save your changes.</p> </li> <li>The dashboard should now fetch metrics from the specified endpoint and display them in the new chart.</li> </ul> </li> </ol> <p>If your application is running at <code>http://10.0.0.15:9091</code>, the URL you would enter in the dashboard configuration would be: <pre><code>http://10.0.0.15:9091/kubernetes/api/get-charts\n</code></pre></p>"},{"location":"pixelview/k8s-integration/#example-configuration","title":"Example Configuration","text":""},{"location":"pixelview/k8s-integration/#tips","title":"Tips","text":"<ul> <li>Ensure that the endpoint <code>http://&lt;DATA_IP&gt;:&lt;DATA_PORT&gt;/kubernetes/api/get-charts</code> is accessible from the network where your Pixelview dashboard is hosted.</li> <li>Test the endpoint URL separately to verify that it returns the expected metrics data.</li> <li>Adjust dashboard configurations or metrics visualization settings as needed based on the data retrieved from the endpoint.</li> </ul>"},{"location":"pixelview/k8s-monitoring/","title":"K8s monitoring","text":""},{"location":"pixelview/k8s-monitoring/#overview","title":"Overview","text":"<p>This guide will walk you through setting up monitoring for your Kubernetes cluster using a custom application deployed as a Deployment, a ConfigMap for configuration management, and a Service for external access. Additionally, it includes setting up RBAC (Role-Based Access Control) using ClusterRole and ClusterRoleBinding for necessary permissions.</p>"},{"location":"pixelview/k8s-monitoring/#prerequisites","title":"Prerequisites","text":"<ol> <li>Kubernetes Cluster: Ensure you have a Kubernetes cluster running and <code>kubectl</code> configured to connect to it.</li> <li>Service Account: Create a service account named <code>pixelview-sa</code> in the <code>pixelview</code> namespace with appropriate permissions.</li> </ol>"},{"location":"pixelview/k8s-monitoring/#configuration-files","title":"Configuration Files","text":"<p>You will use the following YAML files:</p> <ul> <li><code>configmap.yaml</code>: Defines configuration parameters for the application.</li> <li><code>deployment.yaml</code>: Deploys the application as a Kubernetes Deployment.</li> <li><code>service.yaml</code>: Exposes the application externally using a LoadBalancer type Service.</li> <li><code>clusterrole.yaml</code>: Defines a ClusterRole with permissions to access various Kubernetes resources.</li> <li><code>clusterrolebinding.yaml</code>: Binds the ClusterRole to the <code>pixelview-sa</code> service account.</li> </ul>"},{"location":"pixelview/k8s-monitoring/#step-by-step-setup","title":"Step-by-Step Setup","text":""},{"location":"pixelview/k8s-monitoring/#1-create-configmap","title":"1. Create ConfigMap","text":"<p>Create a ConfigMap named <code>app-config</code> in the <code>pixelview</code> namespace using the following <code>configmap.yaml</code>: <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\n  namespace: pixelview\ndata:\n  GET_CONFIG_FROM: in-cluster\n  KUBECONFIG_FILE: /usr/src/app/kube-config\n  DATA_IP: &lt;DATA_IP&gt;\n  DATA_PORT: &lt;DATA_PORT&gt;\n</code></pre> Apply the ConfigMap: <pre><code>kubectl apply -f configmap.yaml\n</code></pre></p>"},{"location":"pixelview/k8s-monitoring/#create-service-account","title":"Create Service Account","text":"<p>To incorporate the creation of a service account (<code>pixelview-sa</code>) into your Kubernetes setup, follow these steps. This service account will be used by your application deployment (<code>k8s-info-deployment</code>) within the <code>pixelview</code> namespace.</p> <p>Create a YAML file (<code>serviceaccount.yaml</code>) with the following content: <pre><code>apiVersion: v1 \nkind: ServiceAccount\nmetadata:\n  name: pixelview-sa\n  namespace: pixelview\n</code></pre> Apply Service Account  Apply the ServiceAccount to create it in your Kubernetes cluster:</p> <p><code>bash  kubectl apply -f serviceaccount.yaml</code></p>"},{"location":"pixelview/k8s-monitoring/#2-deploy-application","title":"2. Deploy Application","text":"<p>Deploy your application using a Deployment named <code>k8s-info-deployment</code> in the <code>pixelview</code> namespace with the following <code>deployment.yaml</code>:</p> <p><pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: k8s-monitoring\n  namespace: pixelview\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: k8s-info\n  template:\n    metadata:\n      labels:\n        app: k8s-info\n    spec:\n      serviceAccountName: pixelview-sa\n      containers:\n        - name: k8s-monitoring-pod\n          image: ghcr.io/pixelvirt/kubernetes-go:latest\n          ports:\n            - containerPort: 9090 \n          env:\n            - name: GET_CONFIG_FROM\n              valueFrom:\n                configMapKeyRef:\n                  name: app-config\n                  key: GET_CONFIG_FROM\n            - name: KUBECONFIG_FILE\n              valueFrom:\n                configMapKeyRef:\n                  name: app-config\n                  key: KUBECONFIG_FILE\n            - name: DATA_IP\n              valueFrom:\n                configMapKeyRef:\n                  name: app-config\n                  key: DATA_IP\n            - name: DATA_PORT\n              valueFrom:\n                configMapKeyRef:\n                  name: app-config\n                  key: DATA_PORT\n</code></pre> Deploy the application: <pre><code>kubectl apply -f deployment.yaml\n</code></pre></p>"},{"location":"pixelview/k8s-monitoring/#3-expose-application","title":"3. Expose Application","text":"<p>Expose your application externally using a LoadBalancer type Service named <code>k8s-info-service</code> in the <code>pixelview</code> namespace with the following <code>service.yaml</code>: <pre><code>apiVersion: v1 \nkind: Service\nmetadata:\n  name: k8s-monitoring-service\n  namespace: pixelview\nspec:\n  selector:\n    app: k8s-info\n  ports:\n    - protocol: TCP\n      port: 9090\n      targetPort: 9090\n  externalIPs:\n    - &lt;EXTERNAL_IP&gt; # Replace with your desired external IP\n</code></pre></p>"},{"location":"pixelview/k8s-monitoring/#4-configure-rbac","title":"4. Configure RBAC","text":"<p>Ensure your <code>pixelview-sa</code> service account has the necessary permissions using RBAC. Use the following <code>clusterrole.yaml</code> to define a ClusterRole: <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: full-access\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"pods\", \"services\", \"endpoints\", \"nodes\", \"namespaces\", \"ingresses\", \"events\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"apps\"]\n    resources: [\"deployments\", \"daemonsets\", \"replicasets\", \"statefulsets\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"batch\"]\n    resources: [\"jobs\", \"cronjobs\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"rbac.authorization.k8s.io\"]\n    resources: [\"roles\", \"rolebindings\", \"clusterroles\", \"clusterrolebindings\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"autoscaling\"]\n    resources: [\"horizontalpodautoscalers\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"policy\"]\n    resources: [\"poddisruptionbudgets\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n  - apiGroups: [\"extensions\", \"networking.k8s.io\"]\n    resources: [\"ingresses\"]\n    verbs: [\"list\", \"get\", \"watch\"]\n</code></pre> Apply the ClusterRole: <pre><code>kubectl apply -f clusterrole.yaml\n</code></pre> Bind the ClusterRole to <code>pixelview-sa</code> with <code>clusterrolebinding.yaml</code>: <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: full-access-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: full-access\nsubjects:\n  - kind: ServiceAccount\n    name: pixelview-sa\n    namespace: pixelview\n</code></pre> Apply the ClusterRoleBinding: <pre><code>kubectl apply -f clusterrolebinding.yaml\n</code></pre></p>"},{"location":"pixelview/k8s-monitoring/#verification","title":"Verification","text":"<p>Once applied, verify that your application is running and accessible externally via the specified LoadBalancer IP. Check logs and application behavior to ensure it is correctly configured using the ConfigMap values.</p> <p>To verify or check metrics on the Pixelview dashboard after deployment, follow these steps to configure a new chart:</p> <ol> <li> <p>Access Dashboard Edit Mode:</p> <ul> <li>Navigate to your Pixelview dashboard.</li> <li>Click on \"Edit Dashboard\" to enter edit mode.</li> <li> <p>Add New Chart:</p> </li> <li> <p>Locate the option to \"Add New Chart\" .Click on it to create a new visualization.</p> </li> <li> <p>Add New Source:</p> </li> <li> <p>Look for an option to \"Add New Source\" . Click on it to configure a new data source.</p> </li> <li> <p>Configure Data Source:</p> </li> <li> <p>Provide an appropriate name for the data source.</p> </li> <li>In the URL section, enter the endpoint URL: <code>http://&lt;DATA_IP&gt;:&lt;DATA_PORT&gt;/kubernetes/api/get-charts</code>.<ul> <li>Replace <code>&lt;DATA_IP&gt;</code> with the actual IP address where your application is running.</li> <li>Replace <code>&lt;DATA_PORT&gt;</code> with the port number configured for your application.</li> </ul> </li> <li> <p>Save and Display Metrics:</p> </li> <li> <p>After configuring the data source, save your changes.</p> </li> <li>The dashboard should now fetch metrics from the specified endpoint and display them in the new chart.</li> </ul> </li> </ol>"},{"location":"pixelview/k8s-monitoring/#example-configuration","title":"Example Configuration","text":"<p>If your application is running at <code>http://192.168.101.100:9090</code>, the URL you would enter in the dashboard configuration would be: <pre><code>http://192.168.101.100:9090/kubernetes/api/get-charts\n</code></pre></p>"},{"location":"pixelview/k8s-monitoring/#tips","title":"Tips","text":"<ul> <li>Ensure that the endpoint <code>http://&lt;DATA_IP&gt;:&lt;DATA_PORT&gt;/kubernetes/api/get-charts</code> is accessible from the network where your Pixelview dashboard is hosted.</li> <li>Test the endpoint URL separately to verify that it returns the expected metrics data.</li> <li>Adjust dashboard configurations or metrics visualization settings as needed based on the data retrieved from the endpoint.</li> </ul>"},{"location":"pixelview/kube-installation/","title":"Install on Kubetnetes","text":""},{"location":"pixelview/kube-installation/#pixelview-kubernetes-deployment-and-service-setup-guide","title":"PixelView Kubernetes Deployment and Service Setup Guide","text":"<p>This guide will walk you through deploying and configuring the PixelView application and its services using Kubernetes.</p>"},{"location":"pixelview/kube-installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster up and running</li> <li><code>kubectl</code> configured to interact with your cluster</li> </ul>"},{"location":"pixelview/kube-installation/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"pixelview/kube-installation/#1-create-deployment-and-service-yaml-files","title":"1. Create Deployment and Service YAML Files","text":"<p>Save the following content into separate YAML files.</p> <p>Combined Deployment File: <code>pixelview-deployment.yaml</code>\\ <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: escalation\n  namespace: pixelview\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: escalation\n  template:\n    metadata:\n      labels:\n        app: escalation\n    spec:\n      containers:\n      - name: escalation\n        image: ghcr.io/pixelvirt/escalation:latest\n        ports:\n        - containerPort: 80\n        env:\n        - name: MONGOURL\n          value: \"mongoservice:27017\"\n        - name: RABBITURL\n          value: \"amqp://alertagility:vcW41MPUlM54uw@rabbitmqservice:5673/alertagility\"\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fin-escalation\n  namespace: pixelview\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: fin-escalation\n  template:\n    metadata:\n      labels:\n        app: fin-escalation\n    spec:\n      containers:\n      - name: fin-escalation\n        image: ghcr.io/pixelvirt/findescalation:latest\n        ports:\n        - containerPort: 80\n        env:\n        - name: MONGOURL\n          value: \"mongoservice:27017\"\n        - name: RABBITURL\n          value: \"amqp://alertagility:vcW41MPUlM54uw@rabbitmqservice:5673/alertagility\"\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: alertagility\n  namespace: pixelview\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: alertagility\n  template:\n    metadata:\n      labels:\n        app: alertagility\n    spec:\n      containers:\n      - name: alertagility\n        image: ghcr.io/pixelvirt/alertagility:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 9090\n        - containerPort: 9191\n        env:\n        - name: MONGOURL\n          value: \"mongoservice:27017\"\n        - name: DOMAIN\n          value: \"demo.pixelvirt.com\"\n        - name: RABBITURL\n          value: \"amqp://alertagility:wq:vcW41MPUlM54uw@rabbitmqservice:5673/alertagility\"\n        - name: AUTOMATIONURL\n          value: \"10.0.0.34:443\"\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rabbitmq\n  namespace: pixelview\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: rabbitmq\n  template:\n    metadata:\n      labels:\n        app: rabbitmq\n    spec:\n      containers:\n      - name: rabbitmq\n        image: ghcr.io/pixelvirt/inithive-rabbitmq:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 5672\n        env:\n        - name: RABBITMQ_PASSWORD\n          value: vcW41MPUlM54uw\n        - name: RABBITMQ_USER\n          value: alertagility\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mongodb\n  namespace: pixelview\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mongodb\n  template:\n    metadata:\n      labels:\n        app: mongodb\n    spec:\n      containers:\n      - name: mongodb\n        image: mongo:5\n        volumeMounts:\n        - mountPath: /data/db\n          name: mongodb-data\n      volumes:\n      - name: mongodb-data\n        hostPath:\n          path: /data/db\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: alert-frontend\n  namespace: pixelview\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: alert-frontend\n  template:\n    metadata:\n      labels:\n        app: alert-frontend\n    spec:\n      containers:\n      - name: alert-frontend\n        image: ghcr.io/pixelvirt/alertagility-frontend:v2\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 80\n        env:\n        - name: BACKEND_URL\n          value: \"alertagility:9090\"\n</code></pre></p> <p>Combined Service File: <code>pixelview-service.yaml</code> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: rabbitmqservice\n  namespace: pixelview\nspec:\n  selector:\n    app: rabbitmq\n  ports:\n    - protocol: TCP\n      port: 5672\n      targetPort: 5672\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: alert-frontend-service\n  namespace: pixelview\nspec:\n  selector:\n    app: alert-frontend\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n  externalIPs:\n    - 10.0.0.34\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: alertagility\n  namespace: pixelview\nspec:\n  ports:\n    - name: \"9090\"\n      port: 9090\n      targetPort: 9090\n  selector:\n    app: alertagility\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mongoservice\n  namespace: pixelview\nspec:\n  selector:\n    app: mongodb\n  ports:\n    - protocol: TCP\n      port: 27017\n      targetPort: 27017\n</code></pre></p>"},{"location":"pixelview/kube-installation/#2-apply-the-yaml-files","title":"2. Apply the YAML Files","text":"<p>Apply the combined deployment and service YAML files using <code>kubectl apply -f</code> command: <pre><code>kubectl apply -f pixelview-deployment.yaml\nkubectl apply -f pixelview-service.yaml\n</code></pre></p>"},{"location":"pixelview/kube-installation/#3-verify-deployments-and-services","title":"3. Verify Deployments and Services","text":"<p>To ensure that your deployments and services are running correctly, use the following commands:</p> <p><pre><code>kubectl get deployments\nkubectl get services\n</code></pre> You should see a list of deployments and services along with their statuses.</p>"},{"location":"pixelview/kube-installation/#4-clone-repository-alternative-to-manually-creating-deployment-files","title":"4 Clone Repository (Alternative to Manually Creating Deployment Files):","text":"<p>If you prefer not to create deployment files manually, you can clone the repository containing the Kubernetes manifests: <pre><code>git clone https://github.com/pixelvirt/k8s-pixelview.git\ncd k8s-pixelview\nkubectl apply -f installation\n</code></pre></p>"},{"location":"pixelview/kube-installation/#accessing-the-services","title":"Accessing the Services","text":"<p>Use the external IPs and ports specified in the service configurations to access the services. For example, to access the <code>alert-frontend-service</code>, navigate to: <pre><code>http://&lt;external-ip&gt;:3000\n</code></pre> Replace <code>&lt;external-ip&gt;</code> with the actual IP address specified in the <code>pixelview-service.yaml</code>.</p>"},{"location":"pixelview/kube-installation/#conclusion","title":"Conclusion","text":"<p>You have successfully deployed and configured the PixelView application and its services on your Kubernetes cluster using the combined YAML files. Ensure to monitor your deployments and services for any issues and refer to Kubernetes documentation for advanced configurations and troubleshooting.</p>"},{"location":"pixelview/login/","title":"Login","text":"<p>Default Login Credentials:</p> <p>The default login credentials for accessing PixelView are as follows:</p> <ul> <li>Username: admin@localhost</li> <li>Password: password</li> </ul> <p>Important Note: It is highly recommended to change your default password immediately after your first login to enhance the security of your account.</p> <p>Steps to Change Password:</p> <ol> <li> <p>Login to PixelView: Use the default credentials (admin@localhost and password) to log in to your PixelView account.</p> </li> <li> <p>Access Settings:</p> <ul> <li>After logging in, navigate to the bottom-left corner of the interface.</li> <li>Click on the settings icon to access the settings menu. </li> <li> <p>Locate Change Password Option:</p> </li> <li> <p>Within the settings menu, locate the \"Change Password\" option.</p> </li> <li>Click on this option to proceed with changing your password. </li> <li> <p>Submit New Password:</p> </li> <li> <p>After selecting the \"Change Password\" option, you will be directed to a page where you can input your new password.</p> </li> <li>Enter your desired new password in the provided field.</li> <li> <p>Confirm New Password:</p> </li> <li> <p>Re-enter the new password in the confirmation field to ensure accuracy.</p> </li> <li> <p>Finalize Password Change:</p> </li> <li> <p>Once you have entered and confirmed your new password, click on the \"Change Password\" button to finalize the process.</p> </li> </ul> </li> </ol> <p>Confirmation: Upon successful completion of the above steps, your login password for PixelView will be updated to the new one you specified. </p> <p>Note: For security purposes, it is advisable to choose a strong, unique password that is not easily guessable and to periodically update your password.</p>"},{"location":"pixelview/managements/","title":"Management","text":""},{"location":"pixelview/managements/#management","title":"management","text":"<p>The Management section in PixelView is the hub for administering users, groups, and automation bots. Below is a detailed guide on the various subsections within Management. </p>"},{"location":"pixelview/managements/#1-users","title":"1. Users","text":"<p>The Users section allows you to manage user accounts. Follow the steps below to view, add, and manage users.</p>"},{"location":"pixelview/managements/#viewing-users","title":"Viewing Users","text":"<ol> <li>Click on Users from the side menu under the Management section. </li> <li>A list of all registered users will be displayed, showing details like name, email, and role.</li> </ol>"},{"location":"pixelview/managements/#adding-a-new-user","title":"Adding a New User","text":"<ol> <li>To invite a new user, click on the \"+\" icon at the top-right corner. </li> <li>A popup labeled Invite User will appear. Fill out the following fields: <ul> <li>First Name: Enter the first name of the user.</li> <li>Last Name: Enter the last name of the user.</li> <li>Email: Enter a valid email address. This email will be used for sending the invitation.</li> <li>Role: Select the user's role from the dropdown. Available options are:<ul> <li>Admin</li> <li>User</li> </ul> </li> </ul> </li> <li>After filling in the details, click the Send Invite button.</li> <li>The user will receive an invitation email with their username and password to log into the platform.</li> </ol>"},{"location":"pixelview/managements/#2-groups","title":"2. Groups","text":"<p>The Groups section is designed to manage user groups for access control and permissions.</p>"},{"location":"pixelview/managements/#viewing-groups","title":"Viewing Groups","text":"<ol> <li> <p>Click on Groups from the side menu under Management. </p> </li> <li> <p>You will see a list of existing groups, including details about group members and roles.</p> </li> </ol>"},{"location":"pixelview/managements/#creating-a-new-group","title":"Creating a New Group","text":"<ol> <li>To create a new group, click on the \"+\" icon at the top-right corner. </li> <li>A popup will appear prompting you to name the group and select members to add.</li> <li>After assigning members, click Create to finalize the new group.</li> </ol>"},{"location":"pixelview/managements/#editing-a-group","title":"Editing a Group","text":"<ol> <li>Click on the group name from the list.</li> <li>You can add/remove members or change group permissions.</li> <li>Click Save to apply the changes.</li> </ol>"},{"location":"pixelview/managements/#3-bots","title":"3. Bots","text":"<p>The Bots section allows you to manage automation bots within the system.</p>"},{"location":"pixelview/managements/#viewing-bots","title":"Viewing Bots","text":"<ol> <li>Click on Bots from the side menu under Management.</li> <li>You will see a list of existing bots with columns for:<ul> <li>Name: The name of the bot.</li> <li>URL: The bot\u2019s endpoint URL.</li> <li>Auth Token: The authentication token for accessing the bot.</li> <li>API Key: The API key associated with the bot.</li> <li>Type: The type of bot (e.g., automation, alerting, etc.).</li> </ul> </li> </ol>"},{"location":"pixelview/managements/#adding-a-new-bot","title":"Adding a New Bot","text":"<ol> <li>To create a new bot, click on the \"+\" icon at the top-right corner.</li> <li>A form will appear, prompting you to fill in details such as:<ul> <li>Name: Name of the bot.</li> <li>URL: The endpoint URL for the bot.</li> <li>Auth Token: Provide the token for authentication.</li> <li>API Key: If required, enter the bot\u2019s API key.</li> </ul> </li> <li>Once completed, click Create Bot to add it to the list.</li> </ol>"},{"location":"pixelview/managements/#managing-bots","title":"Managing Bots","text":""},{"location":"pixelview/managements/#-you-can-edit-or-delete-bots-using-the-action-buttons-in-the-actions-column","title":"- You can edit or delete bots using the action buttons in the Actions column.","text":"<p>This documentation provides a structured process for managing Users, Groups, and Bots in the PixelView platform, as illustrated in the interface.</p>"},{"location":"pixelview/monitoring/","title":"Overview","text":""},{"location":"pixelview/monitoring/#prerequisites","title":"Prerequisites","text":"<p>Before integrating the <code>PixelView</code> service with your OpenStack environment, ensure that you have the following prerequisites:</p> <ul> <li>Access to an OpenStack environment (with Keystone authentication enabled).</li> <li>Docker installed on your system.</li> <li>Python: Follow the instructions provided on Python's website</li> </ul>"},{"location":"pixelview/monitoring/#configure-environment-variables","title":"Configure Environment Variables","text":""},{"location":"pixelview/monitoring/#generate-the-secret-key","title":"Generate the secret key","text":"<ol> <li>Open a new terminal</li> <li> <p>Copy and paste the following command to run the Python interpreter in the terminal     <pre><code>python3\n</code></pre></p> </li> <li> <p>In the terminal write the following script to generate a secure key   <pre><code>import secrets\nsecrets.token_urlsafe(32)\n</code></pre></p> </li> <li> <p>You should get a key that looks similar to this   Generated secret<pre><code>'sSlwF4DCqKTVtNIrp6DixVHblKWgqjYkSpVnvvjM1i8'\n</code></pre>     Copy and store it somewhere safe as it will be used later on.</p> <p>Note</p> <p>Generating secret key using the provided method is not the only way or mandatory by any means. You can use your own combination of string, but make sure that it is strong enough so that it cannot be generated easily</p> </li> </ol>"},{"location":"pixelview/monitoring/#configure-the-env-file","title":"Configure the env file","text":"<p>Create a file named <code>.env</code> in the same directory as your <code>docker-compose.yml</code> file. This file should contain environment variables required for the <code>openstack_mon</code> service.</p> <p>Here's an example <code>.env</code> file based on the provided information: .env<pre><code>ALLOWED_ORIGINS=\"*\"\nDB_USERNAME=\"[OPENSTACK_DB_USERNAME]\"\nDB_PASSWORD=\"[OPENSTACK_DB_PASSWORD]\"\nDB_HOST=\"[OPENSTACK_DB_HOST]\"\nDB_PORT=[RUNNING_DB_PORT]\nROOT_URL=\"[URL:PORT]\"\nSECRET_KEY=\"[SECRET_KEY]\" # Paste the generated key here\n</code></pre> Replace the <code>[SECRET_KEY]</code> with the key generated in Step 1</p>"},{"location":"pixelview/monitoring/#integrate-with-openstack","title":"Integrate with OpenStack","text":""},{"location":"pixelview/monitoring/#pull-docker-image","title":"Pull Docker Image","text":"<p>Pull the latest version of the <code>monitoring_openstack</code> docker image by running the following command: <pre><code>docker pull ghcr.io/pixelvirt/monitoring_openstack:latest\n</code></pre></p>"},{"location":"pixelview/monitoring/#create-docker-compose-file","title":"Create Docker Compose File","text":"<p>Create a <code>docker-compose.yml</code> file with the following content: docker-compose.yml<pre><code>version: '3'\nservices:\n  openstack_mon:\n    restart: always\n    image: ghcr.io/pixelvirt/monitoring_openstack:latest\n    env_file:\n      - .env\n    ports:\n      - \"5000:5000\"    \n    container_name: openstack_mon\n    command: \"gunicorn main:app -b 0.0.0.0:5000 --reload --log-level=debug --log-file=api.log\"\n</code></pre></p>"},{"location":"pixelview/monitoring/#start-the-service","title":"Start the Service","text":"<p>Run the following command to start the <code>monitoring_openstack</code> service: <pre><code>docker compose up -d\n</code></pre></p>"},{"location":"pixelview/monitoring/#configure-openstack-integration","title":"Configure OpenStack Integration","text":"<p>In your monitoring application or system, configure the OpenStack integration using the API endpoint provided by <code>openstack_mon</code>. Provide the necessary authentication details and endpoints to enable monitoring of your OpenStack environment.</p>"},{"location":"pixelview/monitoring/#verify-integration","title":"Verify Integration","text":"<p>Once the integration is configured, verify that your monitoring system can successfully retrieve metrics and monitor your OpenStack environment using the provided API.</p>"},{"location":"pixelview/monitoring/#conclusion","title":"Conclusion","text":"<p>By following these steps and providing the necessary environment variables, you can integrate the <code>PixelView</code>  with your OpenStack environment and monitor it effectively. If you encounter any issues during the integration process, refer to the documentation of <code>monitoring_openstack</code> or seek assistance from the service provider.</p>"},{"location":"pixelview/on-call/","title":"ADD Schedule","text":""},{"location":"pixelview/on-call/#on-call-schedule","title":"On-Call Schedule","text":"<p>This guide will help you get started with creating and managing on-call schedules for your team.</p> <p>What is the On-Call Schedule Management System?</p> <p>This system allows you to easily create and manage rotating on-call schedules for your team. You can assign staff members to be on-call for specific days and times, ensuring there's always someone available to handle urgent issues. </p> <p>Building Your On-Call Schedule</p> <ol> <li> <p>Schedule Name: Give your schedule a clear and descriptive name. This will help you identify it easily later on, especially if you manage multiple schedules.</p> </li> <li> <p>Date Range:</p> <ul> <li>Define the start and end date for the schedule. This specifies the timeframe during which the on-call schedule applies.</li> <li> <p>Time Zone Selection:</p> </li> <li> <p>Select the appropriate time zone for your team. This ensures everyone is on the same page regarding on-call timings.</p> </li> <li> <p>Assigning On-Call Staff (Daily):</p> </li> <li> <p>Select a day of the week (e.g., Sunday, Monday).</p> </li> <li>From the \"Select User\" drop-down menu, choose a staff member to be on-call for that day.</li> <li>Define the start and end time for their on-call shift.</li> <li> <p>Adding Multiple Staff per Day:</p> </li> <li> <p>Click the \"Add User\" button to assign additional staff members to the on-call rotation for the selected day. You can create a complex schedule with multiple staff on-call throughout the day or week.</p> </li> <li> <p>Repeating for Different Days:</p> </li> <li> <p>After completing step 4 for one day (selecting day, assigning staff, defining timings), repeat the entire process for each additional day you want to include in the schedule.</p> </li> </ul> </li> </ol> <p>Saving Your Schedule</p> <p>Once you've assigned on-call staff for all the desired days, locate the  \"Create Schedule\" button  and click it. This will save your on-call schedule for future reference.</p> <p>Additional Tips</p> <ul> <li>Use descriptive schedule names to easily identify them later.</li> <li>Ensure the time zone selected aligns with your team's location.</li> <li>Consider creating recurring schedules to avoid manual setup each time.</li> <li>Familiarize yourself with any additional features the system might offer, such as notifications or escalation procedures.</li> </ul> <p>By following these steps, you can create and manage effective on-call schedules for your team using the On-Call Schedule Management System. This will ensure clear communication and timely response to urgent issues.</p>"},{"location":"pixelview/openstack-integration/","title":"OpenStack Integration into PixelView Environment","text":"<p>This documentation provides a step-by-step guide to integrate OpenStack monitoring into the PixelView environment using both Kubernetes and Docker deployment methods. Choose the appropriate method based on your infrastructure setup.</p>"},{"location":"pixelview/openstack-integration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster: Ensure you have a Kubernetes cluster running with proper access to namespaces and deployment capabilities.</li> <li>Docker setup: Ensure Docker is installed on the server for Docker-based deployments.</li> <li>OpenStack: Set up your OpenStack environment with the necessary credentials and configurations.</li> <li>Access to manifest files and Docker Compose files.</li> </ul> <p>Both the Kubernetes manifests and Docker files can be found in the following GitHub repositories:</p> <ul> <li>Kubernetes Repository: k8s-pixelview repository</li> <li>Docker Repository: pixelview-docker repository</li> </ul>"},{"location":"pixelview/openstack-integration/#1-kubernetes-deployment","title":"1. Kubernetes Deployment","text":""},{"location":"pixelview/openstack-integration/#step-1-create-a-secret-for-openstack-credentials","title":"Step 1: Create a Secret for OpenStack Credentials","text":"<p>Create a Kubernetes Secret to store sensitive environment variables such as the OpenStack authentication details. Save the following manifest as <code>openstack-secrets.yaml</code>: <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: env-openstack-secret\n  namespace: pixelview\ntype: Opaque\nstringData:\n  DATA_IP: \"http://10.0.0.12\"\n  DATA_PORT: \"5000\"\n  OS_PROJECT_DOMAIN_NAME: 'Default'\n  OS_PROJECT_ID: 'e6c6162d59ad4c468ce157e029d18ff8'\n  OS_USER_DOMAIN_NAME: 'Default'\n  OS_PROJECT_NAME: 'admin'\n  OS_TENANT_NAME: 'admin'\n  OS_USERNAME: 'admin'\n  OS_PASSWORD: '0S1vhFh5MCnEJ1B5YVYYYEbld57AigiJUPsPQthd'\n  OS_AUTH_URL: 'http://10.0.0.149:5000'\n  OS_INTERFACE: 'internal'\n  OS_ENDPOINT_TYPE: 'internalURL'\n  OS_IDENTITY_API_VERSION: '3'\n  OS_REGION_NAME: 'RegionOne'\n  OS_AUTH_PLUGIN: 'password'\n  OS_CLOUD: 'openstack'\n  OS_DOMAIN_ID: 'default'\n</code></pre></p> \ud83d\udca1 Note:    You can find the environment variables in the following files:     admin-openrc.sh  or clouds.yaml This file typically contains the authentication credentials and settings for accessing the OpenStack environment.     This configuration file defines the cloud settings, including connection parameters and project information for OpenStack. DATA_IP:  Replace with the IP address of the host machine where the application is deployed    DATA_PORT: Replace with an available port number on the machine where the application is running  <p>Apply the secret to the <code>pixelview</code> namespace:  <pre><code>kubectl apply -f openstack-secret.yaml\n</code></pre></p> <p>Alternatively, you can clone the Kubernetes repository and apply the secret directly: <pre><code>git clone https://github.com/pixelvirt/k8s-pixelview.git\ncd k8s-pixelview/openstack-integration\nkubectl apply -f openstack-secret.yaml\n</code></pre></p>"},{"location":"pixelview/openstack-integration/#step-2-deploy-openstack-monitoring-application","title":"Step 2: Deploy OpenStack Monitoring Application","text":"<p>Create a Kubernetes Deployment that pulls the OpenStack monitoring container and sets up the necessary environment variables from the previously created secret. Save the following manifest as <code>openstack_deployment.yml</code>: <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: openstack-monitoring\n  namespace: pixelview\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: openstack-mon\n  template:\n    metadata:\n      labels:\n        app: openstack-mon\n    spec:\n      containers:\n      - name: openstack-monitoring-pixelview\n        image: ghcr.io/pixelvirt/openstack-go:latest\n        ports:\n        - containerPort: 5000\n        env:\n        - name: DATA_IP\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: DATA_IP\n        - name: DATA_PORT\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: DATA_PORT\n        - name: OS_PROJECT_DOMAIN_NAME\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_PROJECT_DOMAIN_NAME\n        - name: OS_PROJECT_ID\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_PROJECT_ID\n        - name: OS_USER_DOMAIN_NAME\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_USER_DOMAIN_NAME\n        - name: OS_PROJECT_NAME\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_PROJECT_NAME\n        - name: OS_TENANT_NAME\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_TENANT_NAME\n        - name: OS_USERNAME\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_USERNAME\n        - name: OS_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_PASSWORD\n        - name: OS_AUTH_URL\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_AUTH_URL\n        - name: OS_INTERFACE\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_INTERFACE\n        - name: OS_ENDPOINT_TYPE\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_ENDPOINT_TYPE\n        - name: OS_IDENTITY_API_VERSION\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_IDENTITY_API_VERSION\n        - name: OS_REGION_NAME\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_REGION_NAME\n        - name: OS_AUTH_PLUGIN\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_AUTH_PLUGIN\n        - name: OS_CLOUD\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_CLOUD\n        - name: OS_DOMAIN_ID\n          valueFrom:\n            secretKeyRef:\n              name: env-openstack-secret\n              key: OS_DOMAIN_ID\n</code></pre></p> <p>Apply the deployment: <pre><code>kubectl apply -f openstack_deployment.yml\n</code></pre> Alternatively, use the GitHub repo for the deployment: <pre><code>cd k8s-pixelview/openstack-integration\nkubectl apply -f openstack_deployment.yml\n</code></pre></p>"},{"location":"pixelview/openstack-integration/#step-3-expose-the-openstack-monitoring-service","title":"Step 3: Expose the OpenStack Monitoring Service","text":"<p>To make the monitoring service externally accessible, create a service with the following manifest and save it as <code>openstack_service.yml</code>: <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: openstack-mon-service\n  namespace: pixelview\nspec:\n  selector:\n    app: openstack-mon\n  ports:\n    - protocol: TCP\n      port: 5000\n      targetPort: 5000\n  externalIPs:\n    - 10.0.0.12\n</code></pre> Apply the service: <pre><code>kubectl apply -f openstack_service.yml\n</code></pre> Alternatively, use the GitHub repo for the deployment: <pre><code>cd k8s-pixelview/openstack-integration\nkubectl apply -f openstack_service.yml\n</code></pre></p>"},{"location":"pixelview/openstack-integration/#2-docker-deployment","title":"2. Docker Deployment","text":""},{"location":"pixelview/openstack-integration/#step-1-create-the-env-file","title":"Step 1: Create the <code>.env</code> File","text":"<p>Create the following <code>.env</code> file manually: <pre><code>DATA_IP=\"http://10.0.0.12\" \nDATA_PORT=\"4001\"\nOS_PROJECT_DOMAIN_NAME='Default'\nOS_PROJECT_ID='7c65161dd910483fac5e34ca53c5af07'\nOS_USER_DOMAIN_NAME='Default'\nOS_PROJECT_NAME='admin'\nOS_TENANT_NAME='admin'\nOS_USERNAME='admin'\nOS_PASSWORD='VE67QUSy4G4oY2WqPL7zxy2VLL9eK98OrzE2ZZ5y'\nOS_AUTH_URL='http://10.0.0.16:5000'\nOS_INTERFACE='internal'\nOS_ENDPOINT_TYPE='internalURL'\nOS_IDENTITY_API_VERSION='3'\nOS_REGION_NAME='RegionOne'\nOS_AUTH_PLUGIN='password'\nOS_CLOUD=openstack\nOS_DOMAIN_ID='default'\n</code></pre></p>"},{"location":"pixelview/openstack-integration/#step-2-create-the-docker-compose-file","title":"Step 2: Create the Docker Compose File","text":"<p>Manually create the <code>docker-compose.yml</code> file: <pre><code>version: '3'\nservices:\n  openstack-integration:\n    restart: always\n    image: ghcr.io/pixelvirt/openstack-go:latest\n    env_file:\n      - .env\n    ports:\n      - \"5000:5000\"\n    container_name: openstack-integrations\n</code></pre></p> <p>Alternatively, clone the GitHub repository and use the provided Docker Compose file: <pre><code>git clone https://github.com/pixelvirt/pixelview-docker.git\ncd pixelview-docker/openstack-integration\ndocker-compose up -d\n</code></pre></p>"},{"location":"pixelview/openstack-integration/#step-3-deploy-the-docker-container","title":"Step 3: Deploy the Docker Container","text":"<p>To deploy the container manually: <pre><code>docker-compose up -d\n</code></pre> Alternatively, use the GitHub repository: <pre><code>cd pixelview-docker/openstack-integration\ndocker-compose up -d\n</code></pre></p>"},{"location":"pixelview/openstack-integration/#steps-to-verify-metrics-on-the-pixelview-dashboard","title":"Steps to Verify Metrics on the PixelView Dashboard","text":""},{"location":"pixelview/openstack-integration/#4-access-dashboard-edit-mode","title":"4. Access Dashboard Edit Mode:","text":"<ul> <li>Navigate to PixelView Dashboard: Go to the PixelView dashboard URL where the metrics are visualized.</li> <li>Click on \"Edit Dashboard\": This will allow you to customize and add new charts to visualize the metrics.</li> </ul>"},{"location":"pixelview/openstack-integration/#41-add-a-new-chart","title":"4.1. Add a New Chart:","text":"<ul> <li>Locate \"Add New Chart\" Button: Click on the option to create a new chart or widget on the dashboard.</li> </ul>"},{"location":"pixelview/openstack-integration/#42-add-a-new-data-source","title":"4.2. Add a New Data Source:","text":"<ul> <li>Look for \"Add New Source\": You will need to add a data source to fetch metrics from the monitoring service.</li> <li>Click on \"Add New Source\": This option allows you to link a new data source to the chart.</li> </ul>"},{"location":"pixelview/openstack-integration/#43-configure-the-data-source","title":"4.3. Configure the Data Source:","text":"<ul> <li> <p>terBy following these steps, you can integrate OpenStack monitoring into the PixelView environment using either Kubernetes or Docker. You can use the manual method or the provided GitHub repositories for quicker setup.</p> </li> <li> <p>Name the Data Source: Provide a relevant name for your data source.</p> </li> <li> <p>Set the Endpoint URL: In the URL field, enter the following format:</p> </li> </ul> <p><pre><code>    http://&lt;DATA_IP&gt;:&lt;DATA_PORT&gt;/openstack/api/get-charts\n</code></pre> - Replace the placeholder values:</p> <ul> <li> <p>: Enter the actual IP address where your service is running. <li> <p>: Use the port number configured for your application."},{"location":"pixelview/openstack-integration/#44-save-and-display-the-metrics","title":"4.4. Save and Display the Metrics:","text":"<ul> <li>Save the Data Source Configuration: After entering the URL and configuring the data source, click on \"Save\" to apply the changes.</li> <li>View the Chart: The PixelView dashboard should now fetch the metrics from the monitoring service and display them in the new chart.</li> </ul> <p>By following these steps, you can integrate OpenStack monitoring into the PixelView environment using either Kubernetes or Docker. You can use the manual method or the provided GitHub repositories for quicker setup.</p>"},{"location":"pixelview/prometheus-integration/","title":"Prometheus Integration Documentation for PixelView","text":"<p>Introduction:  Prometheus is an open-source monitoring and alerting toolkit widely used for collecting and querying time-series data. Integrating Prometheus into PixelView allows for efficient monitoring of various metrics and systems within the PixelView environment. This documentation outlines the steps required to deploy Prometheus integration on PixelView, including deployment files for Kubernetes resources, Docker deployment methods, and configuration details.</p>"},{"location":"pixelview/prometheus-integration/#deployment-methods","title":"Deployment Methods","text":"<ol> <li>Kubernetes k8s-pixelview repository</li> <li>Docker pixelview-docker repository</li> </ol> <p>1. Kubernetes Deployment Files:</p> <p>1.1. Deployment: The deployment file specifies the configuration for deploying the Prometheus service on PixelView. Below is the deployment file (<code>prometheus-deployment.yaml</code>): <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus-openstack\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus-openstack\n  template:\n    metadata:\n      labels:\n        app: prometheus-openstack\n    spec:\n      containers:\n        - name: prometheus-openstack\n          image: ghcr.io/pixelvirt/prom-go:latest\n          ports:\n            - containerPort: 4000\n          env:\n            - name: DATA_ADDR_URL\n              valueFrom:\n                configMapKeyRef:\n                  name: prom-env\n                  key: DATA_ADDR_URL\n            - name: PROMETHEUS_HOST\n              valueFrom:\n                configMapKeyRef:\n                  name: prom-env\n                  key: PROMETHEUS_HOST\n      restartPolicy: Always\n</code></pre> 1.2. Service: The service file defines the network service for accessing the Prometheus deployment. Below is the service file (<code>prometheus-service.yaml</code>): <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus-openstack\nspec:\n  ports:\n    - name: http\n      port: 4000\n      targetPort: 4000\n  selector:\n    app: prometheus-openstack\n  externalIPs:\n    - [REPLACE_WITH_EXTERNAL_IP]\n</code></pre> 1.3. ConfigMap: The ConfigMap contains sensitive data such as URLs and addresses required for the Prometheus deployment. Below is the ConfigMap file (<code>prometheus-configmap.yaml</code>): <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prom-env\ndata:\n  DATA_ADDR_URL: [REPLACE_WITH_DATA_ADDR_URL]\n  PROMETHEUS_HOST: [REPLACE_WITH_PROMETHEUS_HOST]\n</code></pre></p>"},{"location":"pixelview/prometheus-integration/#2-apply-kubernetes-deployment","title":"2. Apply Kubernetes Deployment","text":""},{"location":"pixelview/prometheus-integration/#21-clone-repository-alternative-to-manually-creating-deployment-files","title":"2.1. Clone Repository (Alternative to Manually Creating Deployment Files):","text":"<p>If you prefer not to create deployment files manually, you can clone the repository containing the Kubernetes manifests:</p> <pre><code>git clone https://github.com/your-repo-path/k8s-pixelview \ncd k8s-pixelview \nkubectl apply -f prometheus-integration\n</code></pre>"},{"location":"pixelview/prometheus-integration/#22-replace-placeholder-values","title":"2.2. Replace Placeholder Values:","text":"<p>Before deploying the Kubernetes resources, replace the placeholder values in the deployment files with the actual values specific to your environment. The placeholder values include:</p> <ul> <li><code>[REPLACE_WITH_EXTERNAL_IP]</code>: External IP address for accessing the Prometheus service.</li> <li><code>[REPLACE_WITH_DATA_ADDR_URL]</code>: Data address URL for Prometheus (URL where your application is running).</li> <li><code>[REPLACE_WITH_PROMETHEUS_HOST]</code>: Prometheus Server host URL.</li> </ul> <p>2.3. Apply Deployment: Apply the deployment files using the <code>kubectl apply</code> command: <pre><code>kubectl apply -f prometheus-deployment.yaml\nkubectl apply -f prometheus-service.yaml\nkubectl apply -f prometheus-configmap.yaml\n</code></pre></p>"},{"location":"pixelview/prometheus-integration/#3-docker-deployment","title":"3. Docker Deployment","text":"<p>For those who prefer deploying Prometheus using Docker, here are the deployment instructions:</p>"},{"location":"pixelview/prometheus-integration/#31-create-a-docker-composeyml-file","title":"3.1. Create a <code>docker-compose.yml</code> File:","text":"<p>Below is the Docker Compose file for deploying Prometheus on PixelView: <pre><code>version: '3'\nservices:\n  prometheus_openstack:\n    restart: always\n    image: ghcr.io/pixelvirt/prom-go:latest\n    env_file:\n      - .env\n    ports:\n      - \"4000:4000\"    \n    container_name: prometheus_openstack\n</code></pre></p>"},{"location":"pixelview/prometheus-integration/#32-create-an-environment-variable-file","title":"3.2. Create an Environment Variable File:","text":"<p>Create a file named <code>.env</code> with the following content:</p> <pre><code>export PROMETHEUS_HOST=http://162.242.209.130:9091/  # Prometheus Server  host URL\n</code></pre>"},{"location":"pixelview/prometheus-integration/#33-run-prometheus-with-docker-compose","title":"3.3. Run Prometheus with Docker Compose:","text":"<p>Once the <code>docker-compose.yml</code> and <code>.env</code> files are ready, follow the steps below to start the Prometheus service.</p> <ol> <li>Navigate to the directory where the <code>docker-compose.yml</code> file is located.</li> <li>Run the following command to start Prometheus:</li> </ol> <p><pre><code>docker compose up -d \n</code></pre> This command will download the Prometheus image (if not already available locally) and start the service.</p>"},{"location":"pixelview/prometheus-integration/#34-clone-git-repository","title":"3.4. Clone Git Repository:","text":"<p>Clone the repository containing the Docker manifests for Prometheus:</p> <pre><code>git git@github.com:pixelvirt/pixelview-docker.git\ncd pixelview-docker/prometheus-integration\n</code></pre>"},{"location":"pixelview/prometheus-integration/#35-adjust-environment-variable-file","title":"3.5. Adjust Environment Variable File:","text":"<p>Modify the <code>.env</code> file to set the environment variable for <code>PROMETHEUS_HOST</code> as follows:</p> <pre><code>export PROMETHEUS_HOST=http://162.242.209.130:9091/  # Prometheus host URL\n</code></pre>"},{"location":"pixelview/prometheus-integration/#4-verify-metrics-on-the-pixelview-dashboard","title":"4. Verify Metrics on the PixelView Dashboard:","text":"<p>To verify or check metrics on the PixelView dashboard after deployment, follow these steps to configure a new chart:</p> <ol> <li> <p>Access Dashboard Edit Mode:</p> <ul> <li>Navigate to your PixelView dashboard.</li> <li>Click on \"Edit Dashboard\" to enter edit mode.</li> <li> <p>Add New Chart:</p> </li> <li> <p>Locate the option to \"Add New Chart\" and click on it to create a new visualization.</p> </li> <li> <p>Add New Source:</p> </li> <li> <p>Look for an option to \"Add New Source\" and click on it to configure a new data source.</p> </li> <li> <p>Configure Data Source:</p> </li> <li> <p>Provide an appropriate name for the data source.</p> </li> <li>In the URL section, enter the endpoint URL: <code>http://&lt;DATA_IP&gt;:&lt;DATA_PORT&gt;/kubernetes/api/get-charts</code>.<ul> <li>Replace <code>&lt;DATA_IP&gt;</code> with the actual IP address where your application is running.</li> <li>Replace <code>&lt;DATA_PORT&gt;</code> with the port number configured for your application.</li> </ul> </li> <li> <p>Save and Display Metrics:</p> </li> <li> <p>After configuring the data source, save your changes.</p> </li> <li>The dashboard should now fetch metrics from the specified endpoint and display them in the new chart.</li> </ul> </li> </ol>"},{"location":"pixelview/prometheus-integration/#conclusion","title":"Conclusion:","text":"<p>This documentation provides a detailed guide for deploying Prometheus integration on PixelView using both Kubernetes and Docker deployment methods. By following these steps, users can effectively monitor and analyze metrics within the PixelView environment using Prometheus.</p>"},{"location":"pixelview/registration/","title":"Registration","text":"<ol> <li> <p>Access Management:</p> <ul> <li>Log in to your PixelView account.</li> <li>Navigate to the 'Management' section from the main navigation menu.</li> <li> <p>Navigate to Users:</p> </li> <li> <p>Within the 'Management' section, locate the 'Users' option.</p> </li> <li>Click on 'Users' to proceed.</li> <li> <p>Initiate New User Registration:</p> </li> <li> <p>In the upper-right corner of the 'Users' section, locate the '+' icon.</p> </li> <li>Click on the '+' icon to initiate the user registration process.</li> <li> <p>Enter User Details:</p> </li> <li> <p>A registration form will appear.</p> </li> <li>Enter the following details for the new user:<ul> <li>First Name</li> <li>Last Name</li> <li>Email Address</li> </ul> </li> <li> <p>Select User Role:</p> </li> <li> <p>From the dropdown menu, select the appropriate role for the new user.</p> </li> <li>Available roles may include 'Admin' and 'User'. Choose according to the user's responsibilities.</li> <li> <p>Submit Registration:</p> </li> <li> <p>After entering all required details and selecting the role, review the information for accuracy.</p> </li> <li>Click on the 'Send Invite' button to complete the registration process.</li> <li> <p>Default Password:</p> </li> <li> <p>After successful registration, the default login password for the new user is automatically generated.</p> </li> <li>The default password follows the format: <code>first_name#123</code><ul> <li>For example, if the first name is 'Duke', the default password would be 'Duke#123'.</li> </ul> </li> </ul> </li> </ol> <p>Note:</p> <ul> <li>Ensure all user details are entered accurately.</li> <li>Select an appropriate role to assign the necessary access and permissions.</li> <li>Inform the new user about their default login password, which is based on their first name followed by '#123'.</li> </ul>"},{"location":"pixelview/schedules/","title":"Schedules","text":""},{"location":"pixelview/schedules/#schedules","title":"Schedules","text":""},{"location":"pixelview/schedules/#overview","title":"Overview","text":"<p>The On-Call Schedule feature in PixelView allows users to view and manage all on-call schedules efficiently. This functionality helps teams keep track of who is on call and when, ensuring smooth operations and prompt incident response.</p>"},{"location":"pixelview/schedules/#accessing-on-call-schedules","title":"Accessing On-Call Schedules","text":"<p>To view all on-call schedules, follow these steps:</p> <ol> <li> <p>Log in to PixelView: Ensure you are logged into your PixelView account.</p> </li> <li> <p>Navigate to the On-Call Schedule:</p> <ul> <li>Locate and click on the On-Call Schedule button on the main dashboard.</li> <li> <p>Open Schedule Options:</p> </li> <li> <p>From the dropdown menu, click on Schedule Options. </p> </li> </ul> </li> </ol>"},{"location":"pixelview/schedules/#viewing-schedules","title":"Viewing Schedules","text":"<p>After selecting Schedule Options, you will see a list of all schedules available. The list includes the following details for each schedule:</p> <ul> <li>Schedule Name: The name assigned to the schedule.</li> <li>Start Date: The date when the schedule begins.</li> <li>End Date: The date when the schedule ends.</li> <li>Action Options: Options for editing or deleting the schedule.</li> </ul>"},{"location":"pixelview/schedules/#action-options","title":"Action Options","text":"<p>For each schedule listed, you will find action options that allow you to manage the schedules:</p> <ol> <li>Edit: Click the Edit button to modify the details of the selected schedule.</li> <li>Delete: Click the Delete button to remove the selected schedule from the system.</li> </ol>"},{"location":"pixelview/schedules/#editing-a-schedule","title":"Editing a Schedule","text":"<ul> <li>Upon clicking Edit, you will be directed to a form where you can update the schedule name, start date, end date, and other relevant details.</li> <li>After making the necessary changes, ensure to save the updates.</li> </ul>"},{"location":"pixelview/schedules/#deleting-a-schedule","title":"Deleting a Schedule","text":"<ul> <li>Clicking Delete will prompt a confirmation dialog to ensure you want to proceed with deleting the schedule.</li> <li>Confirm the deletion to remove the schedule permanently.</li> </ul>"},{"location":"pixelview/schedules/#viewing-detailed-schedule-information","title":"Viewing Detailed Schedule Information","text":"<p>To view the on-call schedule details for a particular schedule:</p> <ol> <li>Click on the specific schedule name in the list. </li> <li>The detailed on-call schedule will display, showing the current calendar and indicating which users or teams are assigned for on-call duties.</li> </ol>"},{"location":"pixelview/schedules/#calendar-view","title":"Calendar View","text":"<ul> <li>The calendar view will present the current month and highlight the dates where users or teams are assigned to be on call.</li> <li>Assigned individuals will be clearly marked on their respective dates. </li> </ul>"},{"location":"pixelview/schedules/#adding-users-to-the-schedule","title":"Adding Users to the Schedule","text":"<p>You can also add users to the on-call schedule by following these steps:</p> <ol> <li> <p>Select a Date: Click on the date in the calendar when you want to assign an on-call duty.</p> </li> <li> <p>Assign User: A dialog or form will appear, allowing you to select the user or team you wish to assign for that date.</p> </li> <li> <p>Save Assignment: After selecting the appropriate user, confirm and save the changes to update the on-call schedule.</p> </li> </ol>"},{"location":"pixelview/schedules/#conclusion","title":"Conclusion","text":"<p>The On-Call Schedule feature in PixelView is designed to enhance operational efficiency by providing an intuitive interface for managing on-call duties. By following the steps outlined above, users can easily navigate through the scheduling options, edit or delete schedules, view detailed on-call information, and add users to the schedule.</p>"},{"location":"pixelview/services/","title":"Services","text":"<p>Services in Pixelview allow you to connect your Pixelview account to various monitoring systems. This integration enables seamless data flow and better management of your monitoring tools. </p>"},{"location":"pixelview/services/#creating-a-new-service","title":"Creating a New Service","text":"<p>To create a new service in Pixelview, follow these steps:</p> <ol> <li> <p>Navigate to Services</p> <ul> <li>Click on the 'Services' option in the main menu.</li> <li> <p>Add a New Service</p> </li> <li> <p>Select 'Add Services'. This will take you to the 'Add Service' section. </p> </li> <li> <p>Provide Service Details</p> </li> <li> <p>In the 'Add Service' section, you need to fill out the following information:</p> <ul> <li>Service Name: Enter a name for your new service.</li> <li>Integration Type: Select the type of integration. This refers to the specific monitoring tool you want to connect with Pixelview. </li> </ul> </li> <li>Create Service Template</li> <li>After providing the required details, click on the 'Create Template' button. This action will open the Edit Service window. </li> <li> <p>Save the Service Settings</p> </li> <li> <p>In the Edit Service window, review the settings and make any necessary adjustments.</p> </li> <li>Click on 'Save Settings' to finalize the creation of your new service. </li> </ul> </li> </ol>"},{"location":"pixelview/services/#managing-services","title":"Managing Services","text":"<p>Once a new service is created, it will be listed under the All Services option. Here you can view, edit, or delete services as needed.</p> <ul> <li>View Services: Access the list of all services to manage and monitor them.</li> <li>Edit Services: If you need to make changes to an existing service, click on the service name to open the Edit Service window.</li> <li>Delete Services: Remove any service that is no longer needed by selecting the service and choosing the delete option.</li> </ul> <p>By following these steps, you can efficiently integrate your monitoring tools with Pixelview, allowing for improved monitoring and management capabilities. The ability to view, edit, and manage your services ensures that your monitoring setup remains flexible and responsive to your needs.</p>"},{"location":"pixelview/settings/","title":"Settings","text":"<p>The Settings section allows users to manage various aspects of their account and customize their experience within Pixelview. The following options are available: </p>"},{"location":"pixelview/settings/#1-profile-section","title":"1. Profile Section","text":"<p>The Profile section allows users to manage their personal account details and related settings, including API keys and notification preferences. </p>"},{"location":"pixelview/settings/#features","title":"Features:","text":"<ul> <li> <p>First Name:     Enter or edit the first name associated with the user account.</p> </li> <li> <p>Name:     Input your full name or preferred display name, which might be used across various parts of the application.</p> </li> <li> <p>API Key:     This field shows the current API key used to authenticate your account with external services.</p> <ul> <li>Regenerate: Create a new API key if the current one is compromised or outdated.</li> <li> <p>Notification Options: Choose how you'd like to receive notifications:</p> </li> <li> <p>Email: Receive notifications via email.</p> </li> <li>SMS: Get notifications via text message on your phone.</li> <li>Email &amp; SMS: Receive notifications through both email and SMS for better visibility.</li> </ul> </li> </ul>"},{"location":"pixelview/settings/#actions","title":"Actions:","text":"<ul> <li>Save:     Click the Save button to apply changes made to your profile details.</li> </ul>"},{"location":"pixelview/settings/#2-configuration-section","title":"2. Configuration Section","text":"<p>This section allows you to configure various services such as email, SMS, and vault settings for your account. </p>"},{"location":"pixelview/settings/#email-configuration","title":"Email Configuration:","text":"<p>This section allows users to set up email communication by configuring SMTP settings. </p> <ul> <li> <p>Email Provider:     Select the email provider (e.g., SMTP).</p> </li> <li> <p>SMTP Host:     Enter the SMTP server host (e.g., smtp.gmail.com).</p> </li> <li> <p>SMTP Port:     Enter the port number used for the SMTP connection (e.g., 465 or 587).</p> </li> <li> <p>SMTP Username:     Provide the username or email address for the SMTP server.</p> </li> <li> <p>SMTP Password:     Input the password for the SMTP server.</p> </li> </ul>"},{"location":"pixelview/settings/#sms-configuration","title":"SMS Configuration:","text":"<p>This section allows users to set up SMS notifications using an SMS service provider like Twilio. </p> <ul> <li> <p>SMS Provider:     Select your SMS provider (e.g., Twilio).</p> </li> <li> <p>Account SID:     Enter your Twilio Account SID.</p> </li> <li> <p>Phone Number:     Input the phone number you want to use to send or receive SMS notifications.</p> </li> <li> <p>Auth Token:     Provide the authentication token required by the SMS service.</p> </li> </ul>"},{"location":"pixelview/settings/#vault-configuration","title":"Vault Configuration:","text":"<p>This section is used to manage secure vault settings where sensitive information is stored. </p> <ul> <li>Vault URL:     Input the URL of the vault server where secure data is stored.</li> </ul>"},{"location":"pixelview/settings/#actions_1","title":"Actions:","text":"<ul> <li>Save:     Click Save to apply changes to email, SMS, or vault configurations.</li> </ul>"},{"location":"pixelview/settings/#3-change-password-section","title":"3. Change Password Section","text":"<p>The Change Password section allows users to update their account password to ensure the security of their account. </p> <ul> <li> <p>New Password:     Enter a new password for your account.</p> </li> <li> <p>Confirm Password:     Re-enter the new password to confirm that both entries match.</p> </li> </ul>"},{"location":"pixelview/settings/#actions_2","title":"Actions:","text":"<ul> <li> <p>Clear:     Click the Clear button to reset the input fields if needed.</p> </li> <li> <p>Update Password:     Click the Update Password button to change your password. Make sure the two password fields match before submitting.</p> </li> </ul>"},{"location":"pixelview/settings/#4-license","title":"4. License","text":"<p>The License section allows users to apply an existing license key or request a new one to activate the application.</p> <ul> <li> <p>Apply License Key:     If you already have a valid license key, follow these steps:</p> <ol> <li> <p>Navigate to the License section within Settings. </p> </li> <li> <p>Enter or paste your license key into the provided field. </p> </li> <li> <p>Click the Apply License button.</p> </li> <li> <p>If the license key is valid, a message saying \"License applied successfully\" will appear, confirming activation.</p> </li> <li>If the license key is invalid or expired, you will receive an error message asking you to check the key or contact support.</li> </ol> </li> <li> <p>Request License:     If you do not have a license key, you can request one by:</p> <ol> <li>Clicking the Request License button inside the License section.</li> <li>Following the instructions to complete the license request form.</li> </ol> <p>A new license key will be issued, and you can apply it following the steps above.</p> </li> </ul>"},{"location":"pixelview/settings/#license-types","title":"License Types:","text":"<ul> <li>License Type:     Depending on your application usage, the license may allow different levels of functionality such as free, premium, or enterprise tiers.</li> </ul>"},{"location":"pixelview/settings/#license-validity","title":"License Validity:","text":"<ul> <li>Ensure that your license is always up-to-date to avoid service interruptions.</li> <li>License renewal or extension can be requested if needed.</li> </ul>"},{"location":"pixelview/settings/#conclusion","title":"Conclusion","text":"<p>By following the steps outlined in this document, users can easily manage their profiles, configure email and SMS notifications, update their password, and manage vault settings securely. Always ensure that sensitive data like API keys and passwords are handled properly for maintaining account security.</p>"}]}