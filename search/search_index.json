{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Pixelvirt Technology's Documentation Hub","text":"<p>At Pixelvirt Technology, we're more than just a software company - we're your partners in innovation. With a passion for creating cutting-edge solutions and a commitment to unparalleled support, we've been at the forefront of the software industry for [number] years.</p> <p>Our mission is simple: to empower businesses like yours with the tools they need to thrive in today's digital landscape. Whether you're a small startup or a global enterprise, our comprehensive suite of software products is designed to streamline your operations, boost productivity, and drive growth.</p> <p>What sets us apart? It's our dedication to excellence in every aspect of what we do. From the initial development stages to ongoing customer support, we prioritize quality, reliability, and user satisfaction above all else.</p> <p>Our new documentation site is a testament to this commitment. Here, you'll find a wealth of resources to help you make the most of our software offerings. From step-by-step guides and tutorials to troubleshooting tips and best practices, we've got you covered at every stage of your journey.</p> <p>So whether you're a seasoned user looking to maximize your efficiency or a newcomer eager to explore the possibilities, you've come to the right place. Welcome to the Pixelvirt Technology Documentation Hub - your gateway to success in the digital age.</p> <p>Ready to get started? Dive in and discover what sets Pixelvirt Technology apart today.</p>"},{"location":"openstack/image-creation/","title":"Image Creation","text":"<ol> <li> <p>Login to Horizon Dashboard:</p> <ul> <li>Open a web browser and navigate to the Horizon dashboard URL.</li> <li>Enter your username and password to log in.</li> <li> <p>Navigate to the Images Panel:</p> </li> <li> <p>Once logged in, on the left-hand side menu, click on \"Compute\"  to expand the menu.</p> </li> <li>Click on \"Images\" to navigate to the Images panel.</li> <li> <p>Create a New Image:</p> </li> <li> <p>In the Images panel, click on the \"Create Image\" button (usually located at the top right corner or bottom of the page).</p> </li> <li>Fill in Image Details:</li> <li>Provide a name for the new image in the \"Name\" field.</li> <li>Optionally, you can add a description to the image in the \"Description\" field.</li> <li>Select the source from which you want to create the image:<ul> <li>Image File: If you have an image file that you want to upload.</li> <li>Instance Snapshot: If you want to create an image from an existing instance snapshot.</li> <li>Volume Snapshot: If you want to create an image from an existing volume snapshot.</li> </ul> </li> <li>Depending on the source selected, provide additional details like file location or instance/volume snapshot.</li> <li> <p>Configure Image Properties:</p> </li> <li> <p>Set the format of the image (usually QCOW2 or RAW).</p> </li> <li>Specify the minimum disk and minimum RAM required for instances created from this image.</li> <li>You may also set other properties like architecture, OS type, etc., if needed.</li> <li> <p>Add Tags (Optional):</p> </li> <li> <p>You can optionally add tags to the image for easier categorization and organization.</p> </li> <li> <p>Review and Create:</p> </li> <li> <p>Review all the details provided for the new image.</p> </li> <li>Click on the \"Create Image\" or \"Create\" button to create the image.</li> </ul> </li> <li> <p>Verify Image Creation:</p> <ul> <li>Once the image creation process is complete, you should see the new image listed in the Images panel of the Horizon dashboard.</li> <li>You can also verify the image creation by launching instances from the newly created image.</li> </ul> </li> </ol>"},{"location":"openstack/instance-access/","title":"Accessing an OpenStack instance","text":"<p>Accessing an OpenStack instance using a key pair typically involves SSH (Secure Shell) access. Below is a basic guide on how to access an OpenStack instance using a key pair:</p> <ol> <li> <p>Prerequisites:</p> <ul> <li>You should have already created an OpenStack instance and associated it with the key pair during the instance creation process.</li> <li>You should have the private key corresponding to the key pair you associated with the instance. If you generated the key pair through OpenStack, you should have downloaded the private key file during the key pair creation process.</li> <li> <p>Locate the Private Key File:</p> </li> <li> <p>If you haven't already done so, locate the private key file on your local machine. This is the file you downloaded when you created the key pair.</p> </li> <li> <p>Set Appropriate Permissions:</p> </li> <li> <p>Ensure that the permissions on the private key file are set to be restrictive. In Unix-like systems, you can use the following command:</p> <p>bashCopy code</p> <p><code>chmod 600 /path/to/private_key.pem</code></p> </li> </ul> </li> <li> <p>Find the Public IP Address of the Instance:</p> <ul> <li>In the OpenStack dashboard, navigate to the Instances panel or use the OpenStack CLI to find the public IP address of the instance you want to access.</li> <li> <p>SSH into the Instance:</p> </li> <li> <p>Open a terminal or command prompt on your local machine.</p> </li> <li> <p>Use the <code>ssh</code> command to connect to the instance, specifying the username and the path to the private key file:</p> <p>cssCopy code</p> <p><code>ssh -i /path/to/private_key.pem username@instance_public_ip</code></p> </li> </ul> <p>Replace <code>/path/to/private_key.pem</code> with the path to your private key file, <code>username</code> with the appropriate username for the image you are using (common ones include 'ubuntu' or 'centos'), and <code>instance_public_ip</code> with the public IP address of your OpenStack instance.</p> </li> <li> <p>Authenticate:</p> <ul> <li>When prompted, authenticate by typing 'yes' if you trust the host, then enter the passphrase associated with the private key (if you set one during key pair creation).</li> <li> <p>Access the Instance:</p> </li> <li> <p>Once authenticated, you should now have access to the command line interface of the OpenStack instance via SSH.</p> </li> </ul> </li> </ol> <p>Remember to properly manage your private key, as it provides access to your instance. Keep it secure and don't share it with unauthorized parties. Additionally, if you're having trouble accessing the instance, ensure that the security group associated with the instance allows SSH traffic on port 22.</p>"},{"location":"openstack/key-pair/","title":"key pair","text":"<p>Creating a New Key Pair:</p> <ol> <li>Access Horizon:\u00a0Log in to your OpenStack Horizon dashboard with appropriate credentials.</li> <li>Navigate to \"Project\" -&gt; \"Compute\"  -&gt; \"Key Pairs\".</li> <li>Click \"Create Key Pair\".</li> <li>Enter a descriptive name for your key pair (e.g., \"my-key-pair\").</li> <li>(Optional) Choose a key type.\u00a0By default, it's usually SSH Key.</li> <li>Click \"Create Key Pair\".\u00a0Horizon will generate a new key pair consisting of a private key (<code>.pem</code>\u00a0file) and a public key.</li> </ol> <p>Downloading the Private Key:</p> <ul> <li>A dialog box will appear with the private key content.</li> <li>Important:\u00a0It's crucial to download and save the private key securely.\u00a0Do not share your private key with anyone.\u00a0You'll use this private key to connect to your instances later.</li> <li>Click \"Download Key Pair\" to save the private key as a\u00a0<code>.pem</code>\u00a0file to your local machine.</li> </ul> <p>Importing an Existing Key Pair:</p> <ol> <li>Navigate to \"Project\" -&gt; \"Compute\" -&gt; \"Access &amp; Security\" -&gt; \"Key Pairs\".</li> <li>Click \"Import Key Pair\".</li> <li>Enter a name for your key pair (e.g., \"imported-key\").</li> <li>Paste the public key content into the \"Public Key\" text box.\u00a0You can obtain the public key from the existing key pair file (usually named\u00a0<code>&lt;key-name&gt;.pub</code>).</li> <li>Click \"Import Key Pair\".\u00a0Horizon will import the public key associated with your existing key pair.</li> </ol> <p>Additional Notes:</p> <ul> <li>Security Groups:\u00a0Remember to configure security groups for your instances to control inbound traffic and ensure security. Even with a key pair, you'll need appropriate security group rules to allow SSH access on port 22 for your instances.</li> <li>Key Pair Management:\u00a0You can view details, download private keys again (if needed), or delete key pairs from the \"Key Pairs\" list within Horizon.</li> </ul>"},{"location":"openstack/lunch-instance/","title":"Launching an Instance","text":"<ol> <li> <p>Log in to Horizon:</p> <ul> <li>Navigate to your OpenStack Horizon login page and enter your username and password.</li> <li> <p>Access the Compute Section:</p> </li> <li> <p>Once logged in, locate the \"Project\" tab on the Horizon dashboard.</p> </li> <li>Under the \"Project\" tab, click on \"Compute\" and then select \"Instances\".</li> <li> <p>Launch Instance:</p> </li> <li> <p>On the \"Instances\" page, click the \"Launch Instance\" button located in the top right corner.</p> </li> <li> <p>Configure Instance Details:</p> </li> <li> <p>Details Tab:</p> <ul> <li>Instance Name:\u00a0Enter a descriptive name for your virtual machine instance.</li> <li>Description:\u00a0(Optional) Provide a brief description of the instance's purpose.</li> <li>Availability Zone:\u00a0(Optional) Choose a specific availability zone if desired (default is usually fine for beginners).</li> <li> <p>Count:\u00a0Specify the number of identical instances you want to launch (default is 1).</p> <ul> <li>Sources Tab:</li> </ul> </li> <li> <p>Boot Source:\u00a0Select \"Image\" as the boot source.</p> </li> <li>Image:\u00a0Choose the desired operating system image for your instance from the available options.</li> <li>Create New Volume:\u00a0Select \"Yes\" or \"No\" depending on if you want to create a new volume for the instance's storage.</li> <li>Flavor Selection:</li> </ul> </li> <li> <p>In the \"Flavor\" tab, choose the appropriate instance size (flavor) that aligns with your resource requirements. Flavor options typically define CPU cores, RAM, and storage capacity.</p> </li> <li> <p>Network Selection:</p> </li> <li> <p>In the \"Networks\" tab, select the network(s) to which your instance should connect. This allows communication with other resources on the OpenStack cloud.</p> </li> <li> <p>Security Groups:</p> </li> <li> <p>In the \"Security Groups\" tab, select or create a security group that defines the network traffic allowed to and from your instance. It's recommended to create a custom security group with specific rules for secure access.</p> </li> <li> <p>Key Pair Selection:</p> </li> <li> <p>In the \"Key Pair\" tab, choose an existing SSH key pair for secure login to your instance. You can also generate a new key pair within Horizon if needed.</p> </li> <li> <p>Review and Launch:</p> </li> <li> <p>Carefully review all the configuration options you've chosen for your instance.</p> </li> <li>Once satisfied, click the \"Launch Instance\" button to initiate the creation process.</li> <li>Monitoring and Access:</li> </ul> </li> <li> <p>After launching, your instance will appear in the \"Instances\" list with its status transitioning through \"BUILDING\" to \"ACTIVE\" when ready.</p> </li> <li>Use the Horizon dashboard to view details, monitor performance, and access your instance (using SSH with the selected key pair).</li> </ol>"},{"location":"openstack/network-creation/","title":"Openstack Networks","text":"<p>1. Creating a  Internal Network</p> <ol> <li>Navigate to \"Project\" -&gt; \"Network\" -&gt; \"Networks\".</li> <li>Click \"Create Network\" twice to create two separate internal networks.</li> <li>For each network:<ul> <li>Enter a descriptive name (e.g., \"internal-net1\", \"internal-net2\").</li> <li>Set \"Admin State\" to \"Up\".</li> <li>Choose \"No\" for \"Shared\" (unless project-wide sharing is required).</li> <li>Check the \"Create subnet\" checkbox.</li> <li>Configure subnet details for each network:<ul> <li>Enter a name for the subnet (e.g., \"internal-subnet1\", \"internal-subnet2\").</li> <li>Specify the IP address block using CIDR notation (e.g., 10.0.1.0/24 for the first network, 10.0.2.0/24 for the second).</li> <li>(Optional) Define allocation pools if needed.</li> </ul> </li> <li>Click \"Create Network\" to create each network with its subnet.</li> </ul> </li> </ol> <p>2. Create a Router:</p> <ol> <li>Navigate to \"Project\" -&gt; \"Network\" -&gt; \"Routers\".</li> <li>Click \"Create Router\".</li> <li>Enter a name for the router (e.g., \"my-router\").</li> <li>Set \"Admin State\" to \"Up\".</li> <li>Select the existing external network from the \"External Network\" dropdown menu (assuming you have one).</li> <li>Click \"Create Router\" to create the router.</li> </ol> <p>3. Add Internal Networks to the Router:</p> <ol> <li>Navigate back to the \"Routers\" list.</li> <li>Click on the name of the router you just created (e.g., \"my-router\").</li> <li>In the router details view, locate the \"Interfaces\" section.</li> <li>Click the \"Add Interface\" button twice (once for each internal network).</li> <li>For each interface:<ul> <li>Choose \"Subnet\" as the interface type.</li> <li>Select the corresponding internal network from the \"Network\" dropdown (e.g., \"internal-net1\" for the first interface, \"internal-net2\" for the second).</li> <li>Click \"Add Interface\" to connect each internal network to the router.</li> </ul> </li> </ol> <p>4. Obtain and Associate Floating IPs: - Provides a public IP address for your instance, allowing external resources to access it on the internet. - Offers a more flexible and manageable way to expose instances publicly compared to assigning a static public IP directly to the instance.</p> <ol> <li>Obtain Floating IPs:\u00a0You'll need to acquire floating IP addresses from your OpenStack environment. This might involve requesting them from the administrator or using a self-service mechanism if available.</li> <li>Associate Floating IPs with Instances:<ul> <li>Navigate to the instance details within OpenStack Horizon.</li> <li>Look for an option to \"Associate Floating IP\" or similar wording.</li> <li>Select the obtained floating IP(s) from the available options and associate them with your instances within the internal networks.</li> </ul> </li> </ol> <p>5. (Optional) Verify Connectivity:</p> <ul> <li>Once everything is configured, launch instances within the internal networks.</li> <li>You can use tools like\u00a0<code>ping</code>\u00a0or web browsing within the instances to verify connectivity:<ul> <li>Internal network communication should work seamlessly</li> </ul> </li> </ul>"},{"location":"openstack/org-registration/","title":"Organization Registration","text":"<ol> <li> <p>Access Registration Page:</p> <ul> <li>Registration on gcloud is exclusive to organization admins. Normal users will be created by organization admins. To begin the registration process, visit the registration page by clicking here.</li> <li> <p>Organization Registration:</p> </li> <li> <p>If your organization is not yet registered, you need to start by registering your organization. Fill in the necessary details as prompted.</p> </li> <li> <p>Select Organization (If Already Registered):</p> </li> <li> <p>If your organization is already registered, you can simply select it from the list provided.</p> </li> <li> <p>Proceed to User Details:</p> </li> <li> <p>After selecting your organization, click \"Next\" to proceed to the user details section.</p> </li> <li> <p>Fill Project Admin User Details:</p> </li> <li> <p>In this section, provide the necessary details for the project admin user.</p> </li> <li> <p>Submit Registration Request:</p> </li> <li> <p>After filling in the user details, submit the registration request. Your user and organization registration request will be sent to the project admin for review.</p> </li> <li> <p>Wait for Approval:</p> </li> <li> <p>Once submitted, please wait for a while for the project admin to review and approve your registration request.</p> </li> <li> <p>Notification of Approval:</p> </li> <li> <p>You will be notified via text message to the mobile number provided during registration once your account is approved.</p> </li> </ul> </li> </ol>"},{"location":"openstack/org-registration/#logging-in-as-project-admin","title":"Logging In as Project Admin:","text":"<ol> <li> <p>Approval Notification:</p> <ul> <li>Upon approval, you will receive a notification confirming the approval of your account.</li> <li> <p>Log In:</p> </li> <li> <p>With your account approved, you can now log in to the gcloud platform as a project admin using your registered credentials.</p> </li> <li> <p>Access Cloud Services:</p> </li> <li> <p>After logging in, you will have access to various cloud services provided by gcloud as a project admin.</p> </li> </ul> </li> </ol>"},{"location":"openstack/quick-guide/","title":"Initial setup","text":"<p>This documentation is only for the first login of a project admin.After the initial configuration, you can use these steps as a reference for creating additional private networks, routers, and enabling internet access for your VMs within the OpenStack environment.</p> <p>Prerequisites:</p> <ul> <li>Access to OpenStack Horizon dashboard with project admin credentials.</li> </ul> <p>Steps:</p> <p>1. Create a Private Network:</p> <ol> <li>Navigate to \"Project\" -&gt; \"Network\" -&gt; \"Networks\".</li> <li>Click \"Create Network\" to initiate the creation of a new internal network for your VMs.</li> <li>Enter a descriptive name for your network (e.g., \"internal-net1\").</li> <li>Set \"Admin State\" to \"Up\" to ensure the network is active.</li> <li>Choose \"No\" for \"Shared\" unless you intend to share this network with other projects within your OpenStack environment.</li> <li>(Optional) Customize network quotas (e.g., number of subnets, IP addresses) if your cloud provider allows it.<ul> <li>Network quotas might not be directly configurable within Horizon; consult your cloud provider's documentation for details.</li> </ul> </li> <li>Click \"Create Network\" to create the internal network.</li> </ol> <p>2. Create a Subnet for the Private Network:</p> <ol> <li>Within the \"Networks\" list,\u00a0locate the newly created network (e.g., \"internal-net1\"). Click its name to access details.</li> <li>In the network details view, click the \"Create Subnet\" button.</li> <li>Enter a name for the subnet (e.g., \"internal-subnet1\").</li> <li>Specify the IP address block for the subnet using CIDR notation (e.g., 10.0.1.0/24). Choose a block that fits your project's IP address needs and avoids conflicts with existing networks.</li> <li>Leave the \"Gateway IP\" field blank for now. We'll configure this later when enabling internet access.</li> <li>(Optional) Define allocation pools if you need to reserve specific IP addresses within the subnet for designated purposes.</li> <li>Click \"Create Subnet\" to create the subnet within your internal network.</li> </ol> <p>3. Create a Router:</p> <ol> <li>Navigate back to \"Project\" -&gt; \"Network\" -&gt; \"Routers\".</li> <li>Click \"Create Router\" to initiate the creation of a new router.</li> <li>Enter a descriptive name for your router (e.g., \"my-router\").</li> <li>Set \"Admin State\" to \"Up\" to activate the router.</li> <li>In the \"External Network\" dropdown menu,\u00a0select the existing external network that provides internet access\u00a0within your OpenStack environment (assuming you have one). This network typically connects to an external gateway and the internet.</li> <li>Click \"Create Router\" to create the router.</li> </ol> <p>4. Add Interface to Router (Connecting Private Network):</p> <ol> <li>Navigate back to the \"Routers\" list.</li> <li>Click the name of the router you just created (e.g., \"my-router\").</li> <li>Locate the \"Interfaces\" section within the router details view.</li> <li>Click the \"Add Interface\" button.</li> <li>In the \"Interface Type\" dropdown menu, choose \"Subnet\".</li> <li>In the \"Network\" dropdown menu, select the internal network you created earlier (e.g., \"internal-net1\").</li> <li>Click \"Add Interface\" to connect the internal network to the router. Essentially, the router will now act as a gateway for VMs within the internal network to reach the internet.</li> </ol> <p>Verification</p> <ul> <li>Once you've completed these steps, launch VMs and assign them to the created subnet.</li> <li> <p>You can use tools like\u00a0<code>ping</code>\u00a0or web browsing within the VMs to verify connectivity: Additional Notes:</p> </li> <li> <p>Each private network can be attached to only one router, maintaining clear network segmentation and management.</p> </li> </ul>"},{"location":"openstack/quota-org-request/","title":"quota and organization request","text":"<p>OpenStack Quotas</p> <p>In OpenStack, quotas are mechanisms that define resource limits for projects or users within a cloud environment. These limits help cloud administrators control resource consumption and ensure fair allocation among different tenants. Project admins can create or modify quotas to adjust resource availability based on project needs.</p> <p>Quota Request: The quota request feature enables users to request an increase in their default resource quotas by submitting a formal request to the administrator. This documentation outlines the steps to initiate and submit a quota request.</p>"},{"location":"openstack/quota-org-request/#initiating-a-quota-request","title":"Initiating a Quota Request:","text":"<ol> <li> <p>Accessing Resource Request:</p> <ul> <li>Navigate to the designated resource management section within your account interface.</li> <li>Locate and select \"Resource Request.\"</li> <li> <p>Accessing Quota Request:</p> </li> <li> <p>Within the Resource Request section, find and click on \"Quota Request.\"</p> </li> <li> <p>Initiating Quota Request:</p> </li> <li> <p>Click on \"Request Quota\" to commence the quota request process.</p> </li> </ul> </li> </ol>"},{"location":"openstack/quota-org-request/#submitting-a-quota-request","title":"Submitting a Quota Request:","text":"<ol> <li>Specifying Resource Requirements:<ul> <li>In the provided form, specify the additional resources you require.</li> <li>For instance, if you need 3 more instances and 5 additional vCPUs, input '3' for instances and '5' for vCPUs.</li> </ul> </li> <li>Navigating Through the Request Form:<ul> <li>Proceed by clicking \"Next\" to advance through the request form.</li> </ul> </li> <li>Adjusting Values:<ul> <li>Adjust any other relevant values or parameters as needed in the request form.</li> </ul> </li> <li>Saving the Request:<ul> <li>Once satisfied with the provided details, save the request by clicking on the appropriate button.</li> </ul> </li> </ol>"},{"location":"openstack/quota-org-request/#confirmation-and-waiting-for-approval","title":"Confirmation and Waiting for Approval:","text":"<ol> <li>Submission Confirmation:<ul> <li>Upon saving, your quota request is formally submitted for review.</li> </ul> </li> <li>Awaiting Approval:<ul> <li>Please wait for the administrator's review and approval of your quota request.</li> </ul> </li> <li>Notification of Approval:<ul> <li>Upon approval, you will receive a notification via text message confirming the status of your quota request.</li> </ul> </li> </ol> <p>Types of OpenStack Quotas:</p> <p>OpenStack quotas encompass a variety of resources, often categorized as follows (specific names and availability might vary slightly depending on the OpenStack version):</p> <ul> <li>Compute:</li> <li> <p>Instances: This refers to the maximum number of virtual machines (VMs) that a user can create within their project or tenant. Instances are essentially the virtual servers that run applications and perform computing tasks.</p> </li> <li> <p>VCPUs: VCPUs stands for Virtual Central Processing Units. It denotes the total number of virtual CPU cores that a user can allocate across their instances. Each instance typically utilizes one or more VCPUs depending on its computational requirements.</p> </li> <li> <p>RAM (MB): RAM, or Random Access Memory, represents the total amount of memory available for use by the instances. It is measured in megabytes (MB) and determines the amount of data that can be processed simultaneously.</p> </li> <li> <p>Metadata Items: Metadata items are key-value pairs that provide additional information about an instance, such as configuration details or user-defined tags. Users can associate metadata with instances to customize their behavior or provide contextual information.</p> </li> <li> <p>Key Pairs: Key pairs are used for SSH authentication when accessing instances securely. They consist of a public key that is stored on the instance and a private key that remains with the user. Key pairs ensure secure communication between the user's system and the virtual machines.</p> </li> <li> <p>Server Groups: Server groups allow users to logically group instances for various purposes, such as high availability or load balancing. They help in organizing and managing instances efficiently, particularly in complex environments with multiple instances.</p> </li> <li> <p>Server Group Members: This refers to the maximum number of instances that can be members of a single server group. It determines the scalability and flexibility of server groups in distributing workloads and ensuring redundancy.</p> </li> <li> <p>Injected Files: Injected files are files that can be injected into an instance during its creation or runtime. These files are often used for configuration purposes, allowing users to customize the behavior of their instances by providing additional scripts or settings.</p> </li> <li> <p>Injected File Content (B): It specifies the maximum size of each injected file in bytes. This limit ensures that injected files do not exceed a certain size, preventing potential performance issues or resource constraints.</p> </li> <li> <p>Length of Injected File: This represents the maximum length of the content of an injected file in characters. It determines the size limit for individual files injected into instances, ensuring efficient management of configuration files and scripts.</p> </li> <li> <p>Block Storage:</p> <ul> <li>Volumes (number of block storage volumes)</li> <li>Volume Snapshots  (number of snapshots)</li> <li>Totalk size of volume and snapshots(GB) (total storage capacity)</li> </ul> </li> <li>Object Storage:<ul> <li>Containers (number of object storage containers)</li> <li>Objects (number of objects)</li> <li>Gigabytes (total storage capacity)</li> </ul> </li> </ul>"},{"location":"openstack/quota-org-request/#conclusion","title":"Conclusion:","text":"<p>The quota request process allows users to efficiently communicate their additional resource needs to administrators. By following the outlined steps, users can seamlessly submit their requests, facilitating a smoother resource allocation process within the system.</p>"},{"location":"pixelview/cases/","title":"cases","text":""},{"location":"pixelview/cases/#overview","title":"Overview","text":"<p>The Cases section is where you can view and manage all of your alerts. This section provides three categories to help you organize and address issues effectively:</p> <ul> <li>Open Cases</li> <li>My Cases</li> <li>Resolved Cases</li> </ul>"},{"location":"pixelview/cases/#open-cases","title":"Open Cases","text":"<p>In the Open Cases section, you can view all newly triggered alerts from various monitoring platforms such as Zabbix, Prometheus, Nagios, etc. This section also allows you to create new cases to ensure all alerts are addressed promptly.</p>"},{"location":"pixelview/cases/#creating-a-new-case","title":"Creating a New Case","text":"<p>To create a new case, follow these steps:</p> <ol> <li> <p>Navigate to Open Cases</p> <ul> <li>In the Cases section, click on Open Cases to view all active alerts.</li> <li> <p>Initiate Case Creation</p> </li> <li> <p>Click on the + icon located in the upper right corner of the Open Cases section. This action will open a popup window for creating a new case.</p> </li> <li> <p>Fill in Case Details</p> </li> <li> <p>In the popup window, provide the following details for the new case:</p> <ul> <li>Case Name: Enter a descriptive name for the new case.</li> <li>Severity: Select the appropriate severity level for the case. The severity levels are:<ul> <li>L for Low</li> <li>M for Medium</li> <li>H for High</li> <li>C for Critical</li> </ul> </li> <li>Tags: Add relevant tags to help categorize and filter the case.</li> <li>Description: Provide a detailed description of the case, including any pertinent information that will help in resolving the issue.</li> </ul> </li> <li> <p>Create the Case</p> </li> <li> <p>After filling in all the necessary details, click on the Create Case button. This will create the new case and add it to the Open Cases list.</p> </li> </ul> </li> </ol> <p>By following these steps, you can ensure that all alerts are promptly addressed and managed effectively within the Cases section.</p>"},{"location":"pixelview/cases/#managing-alerts","title":"Managing Alerts","text":"<p>In the Open Cases section, you can manage your alerts according to your preferences. The available options include:</p> <ul> <li>Add Comments: You can add comments to any alert for better tracking and communication.</li> <li>Acknowledge Alerts: Mark alerts as acknowledged to indicate that you are aware of them.</li> <li>Manually Resolve Alerts: Resolve alerts manually if you have addressed the issue.</li> </ul> <p>Viewing Alert Details</p> <p>By clicking on any alert, you can access a detailed view of that alert. This detailed view offers multiple management options:</p> <ul> <li>Assign Tasks: Assign tasks related to the alert to a specific user.</li> <li>Add Observables: Include relevant observables to the alert for further analysis.</li> <li>Add or View Comments: Add new comments or view existing comments for context and updates.</li> <li>View Alert History: Review the history of the alert to track its progression and any actions taken.</li> </ul>"},{"location":"pixelview/cases/#my-cases","title":"My Cases","text":"<p>In the My Cases section, you can find alerts that are specifically assigned to you. Here, you have the ability to:</p> <ul> <li>Acknowledge Cases or Alerts: This section lists all the cases or alerts assigned to you, allowing you to acknowledge them.</li> <li>View Detailed Information: By clicking on any alert, you can view comprehensive details about it. This helps you understand the nature and specifics of the alert for better management and resolution.</li> </ul>"},{"location":"pixelview/cases/#tasks-management","title":"Tasks Management","text":"<p>The Tasks section enables you to create, manage, and assign tasks to other users. The functionalities include:</p> <ul> <li>Create New Task: You can create a new task by clicking on the 'TASKS' button. This will navigate you to the task page.</li> <li>Manage Tasks: On the task page, you can find all tasks. Here, you have the option to add new tasks.</li> <li>Add New Task:<ol> <li>Click on the 'Add Task' button.</li> <li>Provide the following details:<ul> <li>Task Title: A brief title for the task.</li> <li>Description: A detailed description of the task.</li> <li>Assign to User or Groups: Select the user or groups you want to assign the task to.</li> </ul> </li> <li>Click on the 'Create Task' button to finalize and assign the task.</li> </ol> </li> </ul>"},{"location":"pixelview/cases/#resolved-cases","title":"Resolved Cases","text":"<p>In the Resolved Case section, you can find alerts related to problems that have been fixed or resolved. If you determine that an issue is not actually resolved, you can reopen the case by following these steps:</p> <ol> <li>Click on the '...' icon located in the last column of the alert.</li> <li>Select 'Re-open'.</li> <li>The alert will be reopened for further investigation and resolution.</li> </ol>"},{"location":"pixelview/dashboard/","title":"dashboard","text":"<p>This document guides you through creating a personalized dashboard experience within the application. The default login page transitions into a fully customizable dashboard where you can add widgets tailored to your preferences.</p> <p>Adding Widgets</p> <ol> <li> <p>Access the Add New Charts Option: Locate and click the \"Add New Charts\" button within the dashboard interface. This action triggers a pop-up window.</p> </li> <li> <p>Add a New Data Source: Within the pop-up window, select the \"Add Source\" option. A new window titled \"Add Chart Source\" will appear.</p> </li> <li> <p>Define Your Data Source:</p> <ul> <li>Click the Plus Icon (+): In the upper right corner of the \"Add Chart Source\" window, click the plus icon (+) to initiate the data source creation process.</li> <li>Provide a Source Name: Assign a descriptive and meaningful name to your data source for easy identification later.</li> <li>Enter the Metric URL: In the designated URL section, meticulously paste the exact URL that points to the data metrics you want to visualize on your dashboard.</li> <li>Token Inclusion (Optional): If the data source necessitates an access token for authentication, enter the valid token in the provided field. Tokens are often used to secure access to restricted data.</li> <li>Click Submit: Once you've entered the necessary details, click the \"Submit\" button to confirm the creation of your data source.</li> </ul> </li> <li> <p>Select Visualization Options: Upon successful data source creation, you'll be presented with various widget options suitable for displaying the data effectively on your dashboard. Common options include:</p> <ul> <li>Bar Charts: Ideal for depicting comparisons between different categories.</li> <li>Line Charts: Well-suited for showcasing trends over time.</li> <li>Pie Charts: Effective for illustrating the relative proportions of components within a whole.</li> <li>Tables: Provide a structured view of your data, especially when dealing with numerous data points.</li> </ul> <p>Carefully consider the nature of your data and the insights you aim to glean when selecting the most appropriate visualization type.</p> </li> <li> <p>Finalize Your Dashboard: Once you've selected the desired widget type(s), click the \"Submit\" button to confirm your selections. Your personalized dashboard will now reflect the chosen widgets, displaying the data from your defined data sources.</p> </li> </ol>"},{"location":"pixelview/dashboard/#resizing-and-repositioning-widgets-on-your-dashboard","title":"Resizing and Repositioning Widgets on Your Dashboard","text":"<p>This guide will show you how to customize your dashboard by resizing and repositioning your widgets.</p> <p>Prerequisites:</p> <ul> <li> <p>You must be in view mode for your dashboard. To edit your dashboard, locate the \"Edit Dashboard\" button (usually next to \"Add New Chart\").</p> </li> <li> <p>Access Dashboard Editing Mode:</p> <ul> <li>Begin by navigating to your dashboard interface.</li> <li>Locate the \"Edit Dashboard\" option. This is typically found next to the \"Add New Chart\" button. Click on \"Edit Dashboard\" to enter editing mode.</li> </ul> </li> <li>Select Widget for Resizing or Repositioning:<ul> <li>Once in editing mode, you'll see all the widgets available on your dashboard.</li> <li>Choose the widget you wish to resize or reposition by clicking on it.</li> </ul> </li> <li>Repositioning a Widget:<ul> <li>To reposition a widget, click and hold on the widget you've selected.</li> <li>Drag the widget to the desired location on the dashboard.</li> <li>Release the mouse button to drop the widget into place.</li> </ul> </li> <li>Resizing a Widget:<ul> <li>To resize a widget, locate the bottom-right corner of the widget.</li> <li>Click and hold on the resizing handle (usually indicated by a small triangle or square).</li> <li>Drag the handle diagonally to adjust the size of the widget.</li> <li>Release the mouse button when you're satisfied with the new size.</li> </ul> </li> <li>Save Changes:<ul> <li>After resizing or repositioning the widget(s) to your liking, it's important to save your changes.</li> <li>Look for the \"Save Changes\" button located next to the \"Add New Chart\" option.</li> <li>Click on \"Save Changes\" to apply the modifications to your dashboard.</li> </ul> </li> </ul> <p>By following these simple steps, you can easily resize and reposition widgets on your dashboard, allowing you to create a layout that best suits your workflow and preferences. Take advantage of these customization options to optimize your dashboard for efficiency and usability</p>"},{"location":"pixelview/installation/","title":"Installation","text":""},{"location":"pixelview/installation/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding with the installation, ensure that you have Docker and Docker Compose installed on your system. To do so you can follow the instructions provided on the docker's website.</p>"},{"location":"pixelview/installation/#steps-to-install","title":"Steps to Install","text":""},{"location":"pixelview/installation/#1-copy-docker-compose-file","title":"1. Copy  Docker Compose File","text":"<p>Create a directory for your project and create a file named <code>docker-compose.yml</code>. Copy the provided service configurations into this file.</p> <p>docker-compose.yaml<pre><code>version: \"3.9\"\n\nservices:\n  escalation:\n    image: ghcr.io/pixelvirt/escalation:latest\n    restart: always\n    depends_on:\n      - rabbitmq\n    extra_hosts:\n      - \"mongoservice:172.17.0.1\"\n      - \"rabbitmqservice:172.17.0.1\"\n    environment:\n      MONGOURL: \"mongoservice:27017\"\n      RABBITURL: \"amqp://alertagility:[RABBIT_MQ_PASSWORD]@rabbitmqservice:5673/alertagility\"\n\n  finEscalation:\n    image: ghcr.io/pixelvirt/findescalation:latest\n    restart: always\n    depends_on:\n      - rabbitmq\n    extra_hosts:\n      - \"mongoservice:172.17.0.1\"\n      - \"rabbitmqservice:172.17.0.1\"\n    environment:\n      MONGOURL: \"mongoservice:27017\"\n      RABBITURL: \"amqp://alertagility:[RABBIT_MQ_PASSWORD]@rabbitmqservice:5673/alertagility\"\n\n  alertagility:\n    image: ghcr.io/pixelvirt/alertagility:latest\n    restart: always\n    ports:\n      - \"9090:9090\"\n    depends_on:\n      - rabbitmq\n    extra_hosts:\n      - \"mongoservice:172.17.0.1\"\n      - \"rabbitmqservice:172.17.0.1\"\n    environment:\n      MONGOURL: \"mongoservice:27017\"\n      DOMAIN: \"demo.yourdomain.com\"\n      RABBITURL: \"amqp://alertagility:wq:[RABBIT_MQ_PASSWORD]@rabbitmqservice:5673/alertagility\"\n\n  rabbitmq:\n    image: ghcr.io/pixelvirt/inithive-rabbitmq:latest\n    restart: always\n    ports:\n      - \"5673:5672\"\n    environment:\n      - RABBITMQ_PASSWORD=[RABBIT_MQ_PASSWORD]\n      - RABBITMQ_USER=alertagility\n\n  mongodb:\n    image: mongo:5\n    network_mode: \"host\"\n    volumes:\n      - ./data:/data/db\n\n  alert-frontend:\n    image: ghcr.io/pixelvirt/alertagility-frontend:v2\n    restart: always\n    depends_on:\n      - alertagility\n    ports:\n      - \"3000:80\"\n    environment:\n      - DOLLAR=$$\n      - ALERTAGILITY_API=alertagility:9090\n      - ALERTAGILITY_REPORT=alertagility:9191\n      - VAULT_URL=`vault_host:port`\n</code></pre> Find <code>DOMAIN</code> and replace with  your actual domain name and adjust environments according to your  system  </p>"},{"location":"pixelview/installation/#2-start-services","title":"2. Start Services","text":"<p>Open a terminal window, navigate to the directory where the <code>docker-compose.yml</code> file is located, and run the following command:   <pre><code>docker compose up -d\n</code></pre></p> <p>This command will start all the services in detached mode, meaning they will run in the background.</p>"},{"location":"pixelview/installation/#3-verify-installation","title":"3. Verify Installation","text":"<p>After running the <code>docker-compose up -d</code> command, you can verify that the services are running by executing:</p> <pre><code>docker compose ps\n</code></pre> <p>This command will display the status of all the services defined in the <code>docker-compose.yml</code> file.</p>"},{"location":"pixelview/installation/#4-accessing-the-application","title":"4. Accessing the Application","text":"<p>Once the services are up and running, you can access the frontend application by opening a web browser and navigating to <code>http://localhost:3000</code>.</p>"},{"location":"pixelview/installation/#5-stopping-services","title":"5. Stopping Services","text":"<p>To stop the running services, execute the following command:</p> <pre><code>docker compose down\n</code></pre> <p>This will stop and remove all containers defined in the <code>docker-compose.yml</code> file.</p>"},{"location":"pixelview/installation/#notes","title":"Notes","text":"<ul> <li>The default username to access the frontend is <code>admin@localhost</code></li> <li>The default password is <code>password</code></li> <li>The services are configured to automatically restart (<code>restart: always</code>) in case of failures or system reboots.</li> <li>The <code>depends_on</code> directive is used to define service dependencies, ensuring that dependent services are started before the dependent ones.</li> <li>Ensure that your system meets the resource requirements for running the services, especially for memory and CPU.</li> <li>You can customize environment variables and port mappings in the <code>docker-compose.yml</code> file as needed.</li> </ul> <p>With these instructions, you should be able to successfully download and install the PixelView Services on your system. If you encounter any issues or have questions, refer to the Docker and Docker Compose documentation or feel free to ask for assistance.</p>"},{"location":"pixelview/kube-installation/","title":"Kubetnetes Installation","text":""},{"location":"pixelview/kube-installation/#pixelview-kubernetes-deployment-and-service-setup-guide","title":"PixelView Kubernetes Deployment and Service Setup Guide","text":"<p>This guide will walk you through deploying and configuring the PixelView application and its services using Kubernetes.</p>"},{"location":"pixelview/kube-installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster up and running</li> <li><code>kubectl</code> configured to interact with your cluster</li> </ul>"},{"location":"pixelview/kube-installation/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"pixelview/kube-installation/#1-create-deployment-and-service-yaml-files","title":"1. Create Deployment and Service YAML Files","text":"<p>Save the following content into separate YAML files.</p> <p>Combined Deployment File: <code>pixelview-deployment.yaml</code>\\ <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: escalation\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: escalation\n  template:\n    metadata:\n      labels:\n        app: escalation\n    spec:\n      containers:\n      - name: escalation\n        image: ghcr.io/pixelvirt/escalation:latest\n        ports:\n        - containerPort: 80\n        env:\n        - name: MONGOURL\n          value: \"mongoservice:27017\"\n        - name: RABBITURL\n          value: \"amqp://&lt;username&gt;:&lt;password&gt;@rabbitmqservice:5673/alertagility\"\n      imagePullSecrets:\n      - name: github-auths\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fin-escalation\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: fin-escalation\n  template:\n    metadata:\n      labels:\n        app: fin-escalation\n    spec:\n      containers:\n      - name: fin-escalation\n        image: ghcr.io/pixelvirt/findescalation:latest\n        ports:\n        - containerPort: 80\n        env:\n        - name: MONGOURL\n          value: \"mongoservice:27017\"\n        - name: RABBITURL\n          value: \"amqp://&lt;username&gt;:&lt;password&gt;@rabbitmqservice:5673/alertagility\"\n      imagePullSecrets:\n      - name: github-auths\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: alertagility\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: alertagility\n  template:\n    metadata:\n      labels:\n        app: alertagility\n    spec:\n      containers:\n      - name: alertagility\n        image: ghcr.io/pixelvirt/alertagility:latest\n        ports:\n        - containerPort: 9090\n        - containerPort: 9191\n        env:\n        - name: MONGOURL\n          value: \"mongoservice:27017\"\n        - name: DOMAIN\n          value: \"demo.pixelvirt.com\"\n        - name: RABBITURL\n          value: \"amqp://&lt;username&gt;:&lt;password&gt;@rabbitmqservice:5673/alertagility\"\n        - name: AUTOMATIONURL\n          value: \"&lt;automation-url&gt;:443\"\n      imagePullSecrets:\n      - name: github-auths\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rabbitmq\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: rabbitmq\n  template:\n    metadata:\n      labels:\n        app: rabbitmq\n    spec:\n      containers:\n      - name: rabbitmq\n        image: ghcr.io/pixelvirt/inithive-rabbitmq:latest\n        ports:\n        - containerPort: 5672\n        env:\n        - name: RABBITMQ_PASSWORD\n          value: &lt;rabbitmq-password&gt;\n        - name: RABBITMQ_USER\n          value: &lt;rabbitmq-username&gt;\n      imagePullSecrets:\n      - name: github-auths\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mongodb\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mongodb\n  template:\n    metadata:\n      labels:\n        app: mongodb\n    spec:\n      containers:\n      - name: mongodb\n        image: mongo:5\n        volumeMounts:\n        - mountPath: /data/db\n          name: mongodb-data\n      volumes:\n      - name: mongodb-data\n        hostPath:\n          path: /data/db\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: alert-frontend\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: alert-frontend\n  template:\n    metadata:\n      labels:\n        app: alert-frontend\n    spec:\n      containers:\n      - name: alert-frontend\n        image: ghcr.io/pixelvirt/alertagility-frontend:v2\n        ports:\n        - containerPort: 80\n        env:\n        - name: DOLLAR\n          value: \"$$\"\n        - name: ALERTAGILITY_API\n          value: \"alertagility:9090\"\n        - name: ALERTAGILITY_REPORT\n          value: \"alertagility:9191\"\n        - name: MONITORING_URL\n          value: \"&lt;monitoring-url&gt;:8000\"\n        - name: VAULT_URL\n          value: \"&lt;vault-url&gt;\"\n      imagePullSecrets:\n      - name: github-auths\n</code></pre> Combined Service File: <code>pixelview-service.yaml</code> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: rabbitmqservice\nspec:\n  selector:\n    app: rabbitmq\n  ports:\n    - protocol: TCP\n      port: 5672\n      targetPort: 5672\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: alert-frontend-service\nspec:\n  selector:\n    app: alert-frontend\n  ports:\n    - protocol: TCP\n      port: 3000\n      targetPort: 80\n  externalIPs:\n    - &lt;external-ip&gt;\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: alertagility\nspec:\n  ports:\n    - name: \"9090\"\n      port: 9090\n      targetPort: 9090\n  selector:\n    app: alertagility\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mongoservice\nspec:\n  selector:\n    app: mongodb\n  ports:\n    - protocol: TCP\n      port: 27017\n      targetPort: 27017\n</code></pre></p>"},{"location":"pixelview/kube-installation/#2-apply-the-yaml-files","title":"2. Apply the YAML Files","text":"<p>Apply the combined deployment and service YAML files using <code>kubectl apply -f</code> command: <pre><code>kubectl apply -f pixelview-deployment.yaml\nkubectl apply -f pixelview-service.yaml\n</code></pre></p>"},{"location":"pixelview/kube-installation/#3-verify-deployments-and-services","title":"3. Verify Deployments and Services","text":"<p>To ensure that your deployments and services are running correctly, use the following commands:</p> <p><pre><code>kubectl get deployments\nkubectl get services\n</code></pre> You should see a list of deployments and services along with their statuses.</p>"},{"location":"pixelview/kube-installation/#accessing-the-services","title":"Accessing the Services","text":"<p>Use the external IPs and ports specified in the service configurations to access the services. For example, to access the <code>alert-frontend-service</code>, navigate to: <pre><code>http://&lt;external-ip&gt;:3000\n</code></pre> Replace <code>&lt;external-ip&gt;</code> with the actual IP address specified in the <code>pixelview-service.yaml</code>.</p>"},{"location":"pixelview/kube-installation/#conclusion","title":"Conclusion","text":"<p>You have successfully deployed and configured the PixelView application and its services on your Kubernetes cluster using the combined YAML files. Ensure to monitor your deployments and services for any issues and refer to Kubernetes documentation for advanced configurations and troubleshooting.</p>"},{"location":"pixelview/login/","title":"login","text":"<p>Default Login Credentials:</p> <p>The default login credentials for accessing PixelView are as follows:</p> <ul> <li>Username: admin@localhost</li> <li>Password: password</li> </ul> <p>Important Note: It is highly recommended to change your default password immediately after your first login to enhance the security of your account.</p> <p>Steps to Change Password:</p> <ol> <li> <p>Login to PixelView: Use the default credentials (admin@localhost and password) to log in to your PixelView account.</p> </li> <li> <p>Access Settings:</p> <ul> <li>After logging in, navigate to the bottom-left corner of the interface.</li> <li>Click on the settings icon to access the settings menu.</li> <li> <p>Locate Change Password Option:</p> </li> <li> <p>Within the settings menu, locate the \"Change Password\" option.</p> </li> <li>Click on this option to proceed with changing your password.</li> <li> <p>Submit New Password:</p> </li> <li> <p>After selecting the \"Change Password\" option, you will be directed to a page where you can input your new password.</p> </li> <li>Enter your desired new password in the provided field.</li> <li> <p>Confirm New Password:</p> </li> <li> <p>Re-enter the new password in the confirmation field to ensure accuracy.</p> </li> <li> <p>Finalize Password Change:</p> </li> <li> <p>Once you have entered and confirmed your new password, click on the \"Change Password\" button to finalize the process.</p> </li> </ul> </li> </ol> <p>Confirmation: Upon successful completion of the above steps, your login password for PixelView will be updated to the new one you specified.</p> <p>Note: For security purposes, it is advisable to choose a strong, unique password that is not easily guessable and to periodically update your password.</p>"},{"location":"pixelview/monitoring/","title":"Monitoring","text":""},{"location":"pixelview/monitoring/#prerequisites","title":"Prerequisites","text":"<p>Before integrating the <code>PixelView</code> service with your OpenStack environment, ensure that you have the following prerequisites:</p> <ul> <li>Access to an OpenStack environment (with Keystone authentication enabled).</li> <li>Docker installed on your system.</li> <li>Python: Follow the instructions provided on Python's website</li> </ul>"},{"location":"pixelview/monitoring/#configure-environment-variables","title":"Configure Environment Variables","text":""},{"location":"pixelview/monitoring/#generate-the-secret-key","title":"Generate the secret key","text":"<ol> <li>Open a new terminal</li> <li> <p>Copy and paste the following command to run the Python interpreter in the terminal     <pre><code>python3\n</code></pre></p> </li> <li> <p>In the terminal write the following script to generate a secure key   <pre><code>import secrets\nsecrets.token_urlsafe(32)\n</code></pre></p> </li> <li> <p>You should get a key that looks similar to this   Generated secret<pre><code>'sSlwF4DCqKTVtNIrp6DixVHblKWgqjYkSpVnvvjM1i8'\n</code></pre>     Copy and store it somewhere safe as it will be used later on.</p> <p>Note</p> <p>Generating secret key using the provided method is not the only way or mandatory by any means. You can use your own combination of string, but make sure that it is strong enough so that it cannot be generated easily</p> </li> </ol>"},{"location":"pixelview/monitoring/#configure-the-env-file","title":"Configure the env file","text":"<p>Create a file named <code>.env</code> in the same directory as your <code>docker-compose.yml</code> file. This file should contain environment variables required for the <code>openstack_mon</code> service.</p> <p>Here's an example <code>.env</code> file based on the provided information: .env<pre><code>ALLOWED_ORIGINS=\"*\"\nDB_USERNAME=\"[OPENSTACK_DB_USERNAME]\"\nDB_PASSWORD=\"[OPENSTACK_DB_PASSWORD]\"\nDB_HOST=\"[OPENSTACK_DB_HOST]\"\nDB_PORT=[RUNNING_DB_PORT]\nROOT_URL=\"[URL:PORT]\"\nSECRET_KEY=\"[SECRET_KEY]\" # Paste the generated key here\n</code></pre> Replace the <code>[SECRET_KEY]</code> with the key generated in Step 1</p>"},{"location":"pixelview/monitoring/#integrate-with-openstack","title":"Integrate with OpenStack","text":""},{"location":"pixelview/monitoring/#pull-docker-image","title":"Pull Docker Image","text":"<p>Pull the latest version of the <code>monitoring_openstack</code> docker image by running the following command: <pre><code>docker pull ghcr.io/pixelvirt/monitoring_openstack:latest\n</code></pre></p>"},{"location":"pixelview/monitoring/#create-docker-compose-file","title":"Create Docker Compose File","text":"<p>Create a <code>docker-compose.yml</code> file with the following content: docker-compose.yml<pre><code>version: '3'\nservices:\n  openstack_mon:\n    restart: always\n    image: ghcr.io/pixelvirt/monitoring_openstack:latest\n    env_file:\n      - .env\n    ports:\n      - \"5000:5000\"    \n    container_name: openstack_mon\n    command: \"gunicorn main:app -b 0.0.0.0:5000 --reload --log-level=debug --log-file=api.log\"\n</code></pre></p>"},{"location":"pixelview/monitoring/#start-the-service","title":"Start the Service","text":"<p>Run the following command to start the <code>monitoring_openstack</code> service: <pre><code>docker compose up -d\n</code></pre></p>"},{"location":"pixelview/monitoring/#configure-openstack-integration","title":"Configure OpenStack Integration","text":"<p>In your monitoring application or system, configure the OpenStack integration using the API endpoint provided by <code>openstack_mon</code>. Provide the necessary authentication details and endpoints to enable monitoring of your OpenStack environment.</p>"},{"location":"pixelview/monitoring/#verify-integration","title":"Verify Integration","text":"<p>Once the integration is configured, verify that your monitoring system can successfully retrieve metrics and monitor your OpenStack environment using the provided API.</p>"},{"location":"pixelview/monitoring/#conclusion","title":"Conclusion","text":"<p>By following these steps and providing the necessary environment variables, you can integrate the <code>PixelView</code>  with your OpenStack environment and monitor it effectively. If you encounter any issues during the integration process, refer to the documentation of <code>monitoring_openstack</code> or seek assistance from the service provider.</p>"},{"location":"pixelview/prometheus-integration/","title":"Prometheus Integration","text":"<p>Introduction: Prometheus is an open-source monitoring and alerting toolkit that is widely used for collecting and querying time-series data. Integrating Prometheus into PixelView allows for efficient monitoring of various metrics and systems within the PixelView environment. This documentation outlines the steps required to deploy Prometheus integration on PixelView, including deployment files for Kubernetes resources and configuration details.</p> <p>1. Deployment Files:</p> <p>1.1. Deployment: The deployment file specifies the configuration for deploying the Prometheus service on PixelView. Below is the deployment file (<code>prometheus-deployment.yaml</code>): <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus-openstack\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus-openstack\n  template:\n    metadata:\n      labels:\n        app: prometheus-openstack\n    spec:\n      containers:\n        - name: prometheus-openstack\n          image: [REPLACE_WITH_IMAGE_URL]\n          ports:\n            - containerPort: 4000\n          env:\n            - name: DATA_ADDR_URL\n              valueFrom:\n                configMapKeyRef:\n                  name: prom-env\n                  key: DATA_ADDR_URL\n            - name: PROMETHEUS_HOST\n              valueFrom:\n                configMapKeyRef:\n                  name: prom-env\n                  key: PROMETHEUS_HOST\n      restartPolicy: Always\n      imagePullSecrets:\n        - name: [REPLACE_WITH_PULL_SECRET_NAME]\n</code></pre> 1.2. Service: The service file defines the network service for accessing the Prometheus deployment. Below is the service file (<code>prometheus-service.yaml</code>): <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus-openstack\nspec:\n  ports:\n    - name: http\n      port: 4000\n      targetPort: 4000\n  selector:\n    app: prometheus-openstack\n  externalIPs:\n    - [REPLACE_WITH_EXTERNAL_IP]\n</code></pre> 1.3. ConfigMap: The ConfigMap contains sensitive data such as URLs and addresses required for the Prometheus deployment. Below is the ConfigMap file (<code>prometheus-configmap.yaml</code>): <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prom-env\ndata:\n  DATA_ADDR_URL: [REPLACE_WITH_DATA_ADDR_URL]\n  PROMETHEUS_HOST: [REPLACE_WITH_PROMETHEUS_HOST]\n</code></pre> 2. Deployment Procedure:</p> <p>2.1. Replace Placeholder Values: Before deploying the Kubernetes resources, replace the placeholder values in the deployment files with the actual values specific to your environment. The placeholder values include:</p> <ul> <li><code>[REPLACE_WITH_IMAGE_URL]</code>: URL of the Prometheus Docker image.</li> <li><code>[REPLACE_WITH_PULL_SECRET_NAME]</code>: Name of the Docker image pull secret.</li> <li><code>[REPLACE_WITH_EXTERNAL_IP]</code>: External IP address for accessing the Prometheus service.</li> <li><code>[REPLACE_WITH_DATA_ADDR_URL]</code>: Data address URL for Prometheus.</li> <li><code>[REPLACE_WITH_PROMETHEUS_HOST]</code>: Prometheus host URL.</li> </ul> <p>2.2. Apply Deployment: Apply the deployment files using the <code>kubectl apply</code> command: <pre><code>kubectl apply -f prometheus-deployment.yaml\nkubectl apply -f prometheus-service.yaml\nkubectl apply -f prometheus-configmap.yaml\n</code></pre> 3. Accessing Prometheus:</p> <p>After successful deployment, Prometheus should be accessible via the provided external IP address and port specified in the service file (<code>prometheus-service.yaml</code>). Access the Prometheus UI using a web browser by navigating to the URL: <code>http://[EXTERNAL_IP]:4000</code>.</p> <p>Conclusion:</p> <p>This documentation provides a detailed guide for deploying Prometheus integration on PixelView, including deployment files for Kubernetes resources and configuration details. By following these steps, users can effectively monitor and analyze metrics within the PixelView environment using Prometheus.</p>"},{"location":"pixelview/registration/","title":"registration","text":"<ol> <li> <p>Access Management:</p> <ul> <li>Log in to your PixelView account.</li> <li>Navigate to the 'Management' section from the main navigation menu.</li> <li> <p>Navigate to Users:</p> </li> <li> <p>Within the 'Management' section, locate the 'Users' option.</p> </li> <li>Click on 'Users' to proceed.</li> <li> <p>Initiate New User Registration:</p> </li> <li> <p>In the upper-right corner of the 'Users' section, locate the '+' icon.</p> </li> <li>Click on the '+' icon to initiate the user registration process.</li> <li> <p>Enter User Details:</p> </li> <li> <p>A registration form will appear.</p> </li> <li>Enter the following details for the new user:<ul> <li>First Name</li> <li>Last Name</li> <li>Email Address</li> </ul> </li> <li> <p>Select User Role:</p> </li> <li> <p>From the dropdown menu, select the appropriate role for the new user.</p> </li> <li>Available roles may include 'Admin' and 'User'. Choose according to the user's responsibilities.</li> <li> <p>Submit Registration:</p> </li> <li> <p>After entering all required details and selecting the role, review the information for accuracy.</p> </li> <li>Click on the 'Send Invite' button to complete the registration process.</li> <li> <p>Default Password:</p> </li> <li> <p>After successful registration, the default login password for the new user is automatically generated.</p> </li> <li>The default password follows the format: <code>first_name#123</code><ul> <li>For example, if the first name is 'Duke', the default password would be 'Duke#123'.</li> </ul> </li> </ul> </li> </ol> <p>Note:</p> <ul> <li>Ensure all user details are entered accurately.</li> <li>Select an appropriate role to assign the necessary access and permissions.</li> <li>Inform the new user about their default login password, which is based on their first name followed by '#123'.</li> </ul>"},{"location":"pixelview/services/","title":"Services","text":"<p>Services in Pixelview allow you to connect your Pixelview account to various monitoring systems. This integration enables seamless data flow and better management of your monitoring tools.</p>"},{"location":"pixelview/services/#creating-a-new-service","title":"Creating a New Service","text":"<p>To create a new service in Pixelview, follow these steps:</p> <ol> <li> <p>Navigate to Services</p> <ul> <li>Click on the 'Services' option in the main menu.</li> <li> <p>Add a New Service</p> </li> <li> <p>Select 'Add Services'. This will take you to the 'Add Service' section.</p> </li> <li> <p>Provide Service Details</p> </li> <li> <p>In the 'Add Service' section, you need to fill out the following information:</p> <ul> <li>Service Name: Enter a name for your new service.</li> <li>Integration Type: Select the type of integration. This refers to the specific monitoring tool you want to connect with Pixelview.</li> </ul> </li> <li> <p>Create Service Template</p> </li> <li> <p>After providing the required details, click on the 'Create Template' button. This action will open the Edit Service window.</p> </li> <li> <p>Save the Service Settings</p> </li> <li> <p>In the Edit Service window, review the settings and make any necessary adjustments.</p> </li> <li>Click on 'Save Settings' to finalize the creation of your new service.</li> </ul> </li> </ol>"},{"location":"pixelview/services/#managing-services","title":"Managing Services","text":"<p>Once a new service is created, it will be listed under the All Services option. Here you can view, edit, or delete services as needed.</p> <ul> <li>View Services: Access the list of all services to manage and monitor them.</li> <li>Edit Services: If you need to make changes to an existing service, click on the service name to open the Edit Service window.</li> <li>Delete Services: Remove any service that is no longer needed by selecting the service and choosing the delete option.</li> </ul> <p>By following these steps, you can efficiently integrate your monitoring tools with Pixelview, allowing for improved monitoring and management capabilities. The ability to view, edit, and manage your services ensures that your monitoring setup remains flexible and responsive to your needs.</p>"}]}